-- -----------------------------------------------------------------------------
-- CREACIÓN BASE DE DATOS
-- -----------------------------------------------------------------------------

-- MySQL Script generated by MySQL Workbench
-- Sun Nov 13 05:25:56 2016
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema IMVE
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `IMVE` ;

-- -----------------------------------------------------
-- Schema IMVE
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `IMVE` DEFAULT CHARACTER SET utf8 ;
USE `IMVE` ;

-- -----------------------------------------------------
-- Table `IMVE`.`TbPaises`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbPaises` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbPaises` (
  `IdPais` INT NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`IdPais`))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbProvincias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbProvincias` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbProvincias` (
  `IdProvincia` INT NOT NULL AUTO_INCREMENT,
  `IdPais` INT NOT NULL,
  `Descripcion` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`IdProvincia`, `IdPais`),
  INDEX `fk_TbProvincias_TbPaises1_idx` (`IdPais` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbCantones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbCantones` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbCantones` (
  `IdCanton` INT NOT NULL AUTO_INCREMENT,
  `IdProvincia` INT NOT NULL,
  `IdPais` INT NOT NULL,
  `Descripcion` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`IdCanton`, `IdProvincia`, `IdPais`),
  INDEX `fk_TbCantones_TbProvincias1_idx` (`IdProvincia` ASC, `IdPais` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbCategorias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbCategorias` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbCategorias` (
  `IdCategoria` INT NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdCategoria`),
  UNIQUE INDEX `Descripcion_UNIQUE` (`Descripcion` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbCategoriasGrupos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbCategoriasGrupos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbCategoriasGrupos` (
  `IdCategoriaGrupo` INT NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdCategoriaGrupo`),
  UNIQUE INDEX `Descripcion_UNIQUE` (`Descripcion` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbDistritos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbDistritos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbDistritos` (
  `IdDistrito` INT NOT NULL AUTO_INCREMENT,
  `IdCanton` INT NOT NULL,
  `IdProvincia` INT NOT NULL,
  `IdPais` INT NOT NULL,
  `Descripcion` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`IdDistrito`, `IdCanton`, `IdProvincia`, `IdPais`),
  INDEX `fk_TbDistritos_TbCantones1_idx` (`IdCanton` ASC, `IdProvincia` ASC, `IdPais` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbPersonas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbPersonas` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbPersonas` (
  `IdPersona` INT NOT NULL AUTO_INCREMENT,
  `Identificacion` VARCHAR(30) NULL DEFAULT NULL,
  `Nombre` VARCHAR(20) NOT NULL,
  `Apellido1` VARCHAR(20) NOT NULL,
  `Apellido2` VARCHAR(20) NULL DEFAULT NULL,
  `FechaNacimiento` DATETIME NULL DEFAULT NULL,
  `IdDistrito` INT NULL,
  `DireccionDomicilio` VARCHAR(250) NULL DEFAULT NULL,
  `Telefono` VARCHAR(10) NULL DEFAULT NULL,
  `Celular` VARCHAR(10) NULL DEFAULT NULL,
  `Correo` VARCHAR(50) NULL DEFAULT NULL,
  `Sexo` CHAR(1) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdPersona`),
  UNIQUE INDEX `Cedula_UNIQUE` (`Identificacion` ASC),
  INDEX `fk_TbPersonas_TbDistritos1_idx` (`IdDistrito` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbCategoriasPersonas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbCategoriasPersonas` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbCategoriasPersonas` (
  `IdCategoria` INT NOT NULL,
  `IdPersona` INT NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdCategoria`, `IdPersona`),
  INDEX `fk_TbCategoriasPersonas_TbPersonas1_idx` (`IdPersona` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbMinisterios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbMinisterios` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbMinisterios` (
  `IdMinisterio` INT NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdMinisterio`),
  UNIQUE INDEX `Descripcion_UNIQUE` (`Descripcion` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbTiposCompromisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbTiposCompromisos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbTiposCompromisos` (
  `IdTipoCompromiso` INT NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdTipoCompromiso`),
  UNIQUE INDEX `Descripcion_UNIQUE` (`Descripcion` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbCompromisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbCompromisos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbCompromisos` (
  `IdCompromiso` INT NOT NULL AUTO_INCREMENT,
  `IdMinisterio` INT NOT NULL,
  `IdTipoCompromiso` INT NOT NULL,
  `Descripcion` VARCHAR(50) NOT NULL,
  `FechaInicio` DATETIME NOT NULL,
  `FechaFinal` DATETIME NOT NULL,
  `Lugar` VARCHAR(100) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdCompromiso`),
  INDEX `fk_TbCompromisos_TbTiposCompromisos1_idx` (`IdTipoCompromiso` ASC),
  INDEX `fk_TbCompromisos_TbMinisterios1_idx` (`IdMinisterio` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbGrupos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbGrupos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbGrupos` (
  `IdGrupo` INT NOT NULL AUTO_INCREMENT,
  `IdCategoriaGrupo` INT NOT NULL,
  `IdMinisterio` INT NULL,
  `Descripcion` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdGrupo`),
  UNIQUE INDEX `Descripcion_UNIQUE` (`Descripcion` ASC),
  INDEX `fk_TbGrupos_TbCategoriasGrupos1_idx` (`IdCategoriaGrupo` ASC),
  INDEX `fk_TbGrupos_TbMinisterios1_idx` (`IdMinisterio` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbGruposPersonas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbGruposPersonas` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbGruposPersonas` (
  `IdGrupoPersona` INT NOT NULL AUTO_INCREMENT,
  `IdPersona` INT NOT NULL,
  `IdGrupo` INT NOT NULL,
  `EsLider` CHAR(1) NOT NULL,
  `FechaInicio` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `FechaFin` DATETIME NULL DEFAULT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdGrupoPersona`),
  INDEX `fk_TbGruposPersonas_TbGrupos1_idx` (`IdGrupo` ASC),
  INDEX `fk_TbGruposPersonas_TbPersonas1_idx` (`IdPersona` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbParticipantesCompromisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbParticipantesCompromisos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbParticipantesCompromisos` (
  `IdPersona` INT NOT NULL,
  `IdCompromiso` INT NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdPersona`, `IdCompromiso`),
  INDEX `fk_TbParticipantesCompromisos_TbCompromisos1_idx` (`IdCompromiso` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbVisitas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbVisitas` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbVisitas` (
  `IdVisita` INT NOT NULL AUTO_INCREMENT,
  `IdMinisterio` INT NOT NULL,
  `Descripcion` VARCHAR(50) NOT NULL,
  `FechaVisita` DATETIME NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Cerrada` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdVisita`),
  INDEX `fk_TbVisitas_TbMinisterios1_idx` (`IdMinisterio` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbPersonasVisitas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbPersonasVisitas` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbPersonasVisitas` (
  `IdVisita` INT NOT NULL,
  `IdPersona` INT NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdVisita`, `IdPersona`),
  INDEX `fk_TbPersonasVisitas_TbPersonas1_idx` (`IdPersona` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbResponsablesCompromisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbResponsablesCompromisos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbResponsablesCompromisos` (
  `IdPersona` INT NOT NULL,
  `IdCompromiso` INT NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdPersona`, `IdCompromiso`),
  INDEX `fk_TbResponsablesCompromisos_TbCompromisos1_idx` (`IdCompromiso` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbRolesUsuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbRolesUsuarios` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbRolesUsuarios` (
  `IdRolUsuario` INT NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdRolUsuario`),
  UNIQUE INDEX `Descripcion_UNIQUE` (`Descripcion` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbTiposSeguimientos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbTiposSeguimientos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbTiposSeguimientos` (
  `IdTipoSeguimiento` INT NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdTipoSeguimiento`),
  UNIQUE INDEX `Descripcion_UNIQUE` (`Descripcion` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbSeguimientos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbSeguimientos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbSeguimientos` (
  `IdSeguimiento` INT NOT NULL AUTO_INCREMENT,
  `IdVisita` INT NOT NULL,
  `IdMinisterio` INT NOT NULL,
  `IdPersonaResponsable` INT NOT NULL,
  `IdTipoSeguimiento` INT NOT NULL,
  `Descripcion` VARCHAR(50) NOT NULL,
  `FechaPropuesta` DATETIME NOT NULL,
  `FechaRealizacion` DATETIME NULL,
  `Observaciones` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdSeguimiento`),
  INDEX `fk_TbSeguimientos_TbVisitas1_idx` (`IdVisita` ASC),
  INDEX `fk_TbSeguimientos_TbMinisterios1_idx` (`IdMinisterio` ASC),
  INDEX `fk_TbSeguimientos_TbTiposSeguimientos1_idx` (`IdTipoSeguimiento` ASC),
  INDEX `fk_TbSeguimientos_TbPersonas1_idx` (`IdPersonaResponsable` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbTiposRelaciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbTiposRelaciones` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbTiposRelaciones` (
  `IdTipoRelacion` INT NOT NULL AUTO_INCREMENT,
  `NombreMasculino` VARCHAR(20) NULL,
  `NombreFemenino` VARCHAR(20) NULL,
  `NombreInversoMasculino` VARCHAR(20) NULL,
  `NombreInversoFemenino` VARCHAR(20) NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdTipoRelacion`),
  UNIQUE INDEX `NombreMasculino_UNIQUE` (`NombreMasculino` ASC),
  UNIQUE INDEX `NombreFemenino_UNIQUE` (`NombreFemenino` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbTiposRelacionesPersonas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbTiposRelacionesPersonas` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbTiposRelacionesPersonas` (
  `IdTipoRelacion` INT NOT NULL,
  `IdPersonaRelacionado1` INT NOT NULL,
  `IdPersonaRelacionado2` INT NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdTipoRelacion`, `IdPersonaRelacionado1`, `IdPersonaRelacionado2`),
  INDEX `fk_TbTiposRelacionesPersonas_TbPersonas1_idx` (`IdPersonaRelacionado1` ASC),
  INDEX `fk_TbTiposRelacionesPersonas_TbPersonas2_idx` (`IdPersonaRelacionado2` ASC),
  INDEX `fk_TbTiposRelacionesPersonas_TbPersonas1_idx1` (`IdPersonaRelacionado2` ASC, `IdPersonaRelacionado1` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbUsuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbUsuarios` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbUsuarios` (
  `IdPersona` INT NOT NULL,
  `IdRolUsuario` INT NOT NULL,
  `Contrasena` VARCHAR(50) NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Activo` CHAR(1) NOT NULL,
  PRIMARY KEY (`IdPersona`),
  INDEX `fk_TbUsuarios_TbRolesUsuarios1_idx` (`IdRolUsuario` ASC))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `IMVE`.`TbReponsablesGruposCompromisos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IMVE`.`TbReponsablesGruposCompromisos` ;

CREATE TABLE IF NOT EXISTS `IMVE`.`TbReponsablesGruposCompromisos` (
  `IdGrupo` INT NOT NULL,
  `IdCompromiso` INT NOT NULL,
  `UsuarioUltimaModificacion` INT NOT NULL,
  `FechaUltimaModificacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IdGrupo`, `IdCompromiso`),
  INDEX `fk_TbReponsablesGruposCompromisos_TbCompromisos1_idx` (`IdCompromiso` ASC))
ENGINE = MyISAM;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------------------------------
-- CREACIÓN VISTAS
-- -----------------------------------------------------------------------------

-- RelacionesFamiliares
DROP VIEW IF EXISTS IMVE.RelacionesFamiliares;

CREATE VIEW IMVE.RelacionesFamiliares AS
SELECT P1.IdPersona
	, TRP.IdTipoRelacion
    , CASE P1.Sexo WHEN 'M' THEN TR.NombreMasculino WHEN 'F' THEN TR.NombreFemenino END AS 'TipoRelacion'
    , CONCAT(P1.Nombre,' ',P1.Apellido1,' ',P1.Apellido2,' es ',CASE P1.Sexo WHEN 'M' THEN LOWER(TR.NombreMasculino) WHEN 'F' THEN LOWER(TR.NombreFemenino) END,' de ',P2.Nombre,' ',P2.Apellido1,' ',P2.Apellido2) AS 'Relacion'
FROM IMVE.TbTiposRelacionesPersonas AS TRP
INNER JOIN IMVE.TbTiposRelaciones AS TR
  ON TRP.IdTipoRelacion = TR.IdTipoRelacion
INNER JOIN IMVE.TbPersonas AS P1
  ON P1.IdPersona = TRP.IdPersonaRelacionado1
INNER JOIN IMVE.TbPersonas AS P2
  ON P2.IdPersona = TRP.IdPersonaRelacionado2
UNION ALL
SELECT P2.IdPersona
	, TRP.IdTipoRelacion
    , CASE P2.Sexo 
		WHEN 'M' THEN 
			CASE TR.NombreInversoMasculino WHEN '' THEN TR.NombreMasculino ELSE TR.NombreInversoMasculino END
		WHEN 'F' THEN 
			CASE TR.NombreInversoFemenino WHEN '' THEN TR.NombreFemenino ELSE TR.NombreInversoFemenino END
	  END AS 'TipoRelacion' 
    , CONCAT(P2.Nombre,' ',P2.Apellido1,' ',P2.Apellido2,' es '
    , CASE P2.Sexo 
		WHEN 'M' THEN 
			CASE TR.NombreInversoMasculino WHEN '' THEN LOWER(TR.NombreMasculino) ELSE LOWER(TR.NombreInversoMasculino) END
		WHEN 'F' THEN 
			CASE TR.NombreInversoFemenino WHEN '' THEN LOWER(TR.NombreFemenino) ELSE LOWER(TR.NombreInversoFemenino) END 
	  END
      , ' de ',P1.Nombre,' ',P1.Apellido1,' ',P1.Apellido2) AS 'Relacion'
FROM IMVE.TbTiposRelacionesPersonas AS TRP
INNER JOIN IMVE.TbTiposRelaciones AS TR
	ON TRP.IdTipoRelacion = TR.IdTipoRelacion
INNER JOIN IMVE.TbPersonas AS P1
	ON P1.IdPersona = TRP.IdPersonaRelacionado1
INNER JOIN IMVE.TbPersonas AS P2
	ON P2.IdPersona = TRP.IdPersonaRelacionado2;

-- -----------------------------------------------------------------------------
-- CREACIÓN PROCEDIMIENTOS ALMACENADOS
-- -----------------------------------------------------------------------------

-- TbDistritosListarDistritosCantonesProvincias
DROP PROCEDURE IF EXISTS IMVE.TbDistritosListarDistritosCantonesProvincias;

DELIMITER //
CREATE PROCEDURE IMVE.TbDistritosListarDistritosCantonesProvincias()
BEGIN

SELECT P.Descripcion AS Pais
	, PR.Descripcion AS Provincia
    , C.Descripcion AS Canton
    , D.Descripcion AS Distrito
    , CONCAT(D.Descripcion,', ',C.Descripcion,', ',PR.Descripcion) AS Direccion
FROM IMVE.TbPaises AS P
INNER JOIN IMVE.TbProvincias AS PR
	ON PR.IdPais = P.IdPais
INNER JOIN IMVE.TbCantones AS C 
	ON C.IdProvincia = PR.IdProvincia
    AND C.IdPais = PR.IdPais
INNER JOIN IMVE.TbDistritos AS D 
	ON D.IdCanton = C.IdCanton
    AND D.IdProvincia = C.IdProvincia
    AND D.IdPais = C.IdPais
ORDER BY D.IdDistrito;

END //
DELIMITER ;

-- TbProvinciasListar
DROP PROCEDURE IF EXISTS IMVE.TbProvinciasListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbProvinciasListar()
BEGIN

DECLARE v_IdPais INT;

SELECT IdPais INTO @v_IdPais
FROM IMVE.TbPaises
WHERE Descripcion = 'Costa Rica';

SELECT IdProvincia
	, Descripcion
FROM IMVE.TbProvincias
WHERE IdPais = @v_IdPais
ORDER BY IdProvincia;

END //
DELIMITER ;

-- TbCantonesListarFiltrado
DROP PROCEDURE IF EXISTS IMVE.TbCantonesListarFiltrado;

DELIMITER //
CREATE PROCEDURE IMVE.TbCantonesListarFiltrado(
	p_IdProvincia INT
)
BEGIN

DECLARE v_IdPais INT;

SELECT IdPais INTO @v_IdPais
FROM IMVE.TbPaises
WHERE Descripcion = 'Costa Rica';

SELECT IdCanton
	, Descripcion
FROM IMVE.TbCantones
WHERE IdPais = @v_IdPais
	AND IdProvincia = p_IdProvincia
ORDER BY IdCanton;

END //
DELIMITER ;

-- TbDistritosListarFiltrado
DROP PROCEDURE IF EXISTS IMVE.TbDistritosListarFiltrado;

DELIMITER //
CREATE PROCEDURE IMVE.TbDistritosListarFiltrado(
	p_IdProvincia INT
    , p_IdCanton INT
)
BEGIN

DECLARE v_IdPais INT;

SELECT IdPais INTO @v_IdPais
FROM IMVE.TbPaises
WHERE Descripcion = 'Costa Rica';

SELECT IdDistrito
	, Descripcion
FROM IMVE.TbDistritos
WHERE IdPais = @v_IdPais
	AND IdProvincia = p_IdProvincia
    AND IdCanton = p_IdCanton
ORDER BY IdDistrito;

END //
DELIMITER ;

-- TbUsuariosListar
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosListar()
BEGIN

SELECT P.IdPersona
	, P.Identificacion
    , CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
    , RU.Descripcion AS Rol
    , CASE U.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM TbUsuarios AS U
INNER JOIN TbPersonas AS P
	ON U.IdPersona = P.IdPersona
INNER JOIN TbRolesUsuarios AS RU
	ON U.IdRolUsuario = RU.IdRolUsuario
WHERE RU.Descripcion <> 'SuperAdmin'
	AND P.Activo = 'A'
    AND U.Activo = 'A'
ORDER BY NombreCompleto;

END //
DELIMITER ;

-- TbUsuariosListarEstado
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosListarEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosListarEstado(
  p_Estado CHAR(1)
)
BEGIN

SELECT P.IdPersona
	, P.Identificacion
    , CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
    , RU.Descripcion AS Rol
    , CASE U.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM TbUsuarios AS U
INNER JOIN TbPersonas AS P
	ON U.IdPersona = P.IdPersona
INNER JOIN TbRolesUsuarios AS RU
	ON U.IdRolUsuario = RU.IdRolUsuario
WHERE RU.Descripcion <> 'SuperAdmin'
	AND P.Activo = 'A'
	AND U.Activo = p_Estado
ORDER BY NombreCompleto;

END //
DELIMITER ;

-- TbUsuariosListarPorIdPersona
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosListarPorIdPersona;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosListarPorIdPersona(
	p_IdPersona INT
)
BEGIN

SELECT P.IdPersona
	, P.Identificacion
	, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
    , RU.Descripcion AS Rol
    , U.Activo AS Estado
FROM TbUsuarios AS U
INNER JOIN TbPersonas AS P
	ON U.IdPersona = P.IdPersona
INNER JOIN TbRolesUsuarios AS RU
	ON U.IdRolUsuario = RU.IdRolUsuario
WHERE U.IdPersona = p_IdPersona;
    
END //
DELIMITER ;

-- TbUsuariosIniciarSesion
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosIniciarSesion;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosIniciarSesion(
	p_Identificacion VARCHAR(30)
    , p_Contrasena VARCHAR(50)
)
BEGIN

SELECT P.IdPersona
	, P.Identificacion
    , CONCAT(P.Nombre,' ',P.Apellido1,' ', P.Apellido2) AS NombreCompleto
    , P.Sexo
    , U.Contrasena
    , RU.IdRolUsuario
    , RU.Descripcion AS 'Rol'
FROM IMVE.TbPersonas AS P
INNER JOIN IMVE.TbUsuarios AS U
	ON P.IdPersona = U.IdPersona
INNER JOIN IMVE.TbRolesUsuarios AS RU
	ON U.IdRolUsuario = RU.IdRolUsuario
WHERE P.Identificacion = p_Identificacion
	AND U.Contrasena = p_Contrasena
    AND P.Activo = 'A'
    AND U.Activo = 'A'
    AND RU.Activo = 'A';
    
END //
DELIMITER ;

-- TbUsuariosSolicitarDatos
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosSolicitarDatos;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosSolicitarDatos(
	p_Identificacion VARCHAR(30)
)
BEGIN

SELECT P.IdPersona
	, P.Identificacion
    , CONCAT(P.Nombre,' ',P.Apellido1,' ', P.Apellido2) AS NombreCompleto
    , P.Correo
    , P.Sexo
FROM IMVE.TbPersonas AS P
INNER JOIN IMVE.TbUsuarios AS U
	ON P.IdPersona = U.IdPersona
WHERE P.Identificacion = p_Identificacion
    AND P.Activo = 'A'
    AND U.Activo = 'A';
    
END //
DELIMITER ;

-- TbUsuariosCambiarContrasena
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosCambiarContrasena;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosCambiarContrasena(
	p_IdPersona INT
    , p_Contrasena VARCHAR(50)
)
BEGIN

UPDATE IMVE.TbUsuarios
SET Contrasena = p_Contrasena
	, UsuarioUltimaModificacion = p_IdPersona
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdPersona = p_IdPersona
	AND Activo = 'A';

SELECT p_IdPersona AS Id;
    
END //
DELIMITER ;

-- TbUsuariosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosAgregar(
	p_IdPersona INT
	, p_IdRolUsuario INT
	, p_Contrasena VARCHAR(50)
	, p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbUsuarios(
	IdPersona
    , IdRolUsuario
    , Contrasena
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_IdPersona
    , p_IdRolUsuario
    , p_Contrasena
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

UPDATE IMVE.TbPersonas
SET Activo = 'A'
WHERE IdPersona = p_IdPersona;

SELECT LAST_INSERT_ID() AS Id;
    
END //
DELIMITER ;

-- TbUsuariosModificar
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosModificar(
	p_IdPersona INT
    , p_IdRolUsuario INT
    , p_Contrasena VARCHAR(50)
    , p_Activo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

IF p_Contrasena = '' THEN
	UPDATE IMVE.TbUsuarios
	SET IdRolUsuario = p_IdRolUsuario
		, Activo = p_Activo
		, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
		, FechaUltimaModificacion = CURRENT_TIMESTAMP()
	WHERE IdPersona = p_IdPersona;
ELSE 
	UPDATE IMVE.TbUsuarios
    SET IdRolUsuario = p_IdRolUsuario
		, Contrasena = p_Contrasena
		, Activo = p_Activo
		, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
		, FechaUltimaModificacion = CURRENT_TIMESTAMP()
	WHERE IdPersona = p_IdPersona;
END IF;

END //
DELIMITER ;

-- TbUsuariosDesactivar
DROP PROCEDURE IF EXISTS IMVE.TbUsuariosDesactivar;

DELIMITER //
CREATE PROCEDURE IMVE.TbUsuariosDesactivar(
	p_IdPersona INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbUsuarios
SET Activo = 'I'
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdPersona = p_IdPersona;
    
END //
DELIMITER ;

-- TbTiposRelacionesListar
DROP PROCEDURE IF EXISTS IMVE.TbTiposRelacionesListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposRelacionesListar()
BEGIN

SELECT IdTipoRelacion
	, NombreMasculino
    , NombreFemenino
    , NombreInversoMasculino
    , NombreInversoFemenino
FROM IMVE.TbTiposRelaciones
ORDER BY NombreMasculino
	, NombreFemenino
    , NombreInversoMasculino
    , NombreInversoFemenino;
    
END //
DELIMITER ;

-- TbTiposRelacionesListarTipoRelacion
DROP PROCEDURE IF EXISTS IMVE.TbTiposRelacionesListarTipoRelacion;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposRelacionesListarTipoRelacion(
	p_TipoRelacion CHAR(2)
)
BEGIN

IF p_TipoRelacion = 'V' THEN
	SELECT IdTipoRelacion
		, NombreMasculino
		, NombreFemenino
		, NombreInversoMasculino
		, NombreInversoFemenino
	FROM IMVE.TbTiposRelaciones
    WHERE NombreInversoMasculino != ''
		AND NombreInversoFemenino != ''
	ORDER BY NombreMasculino
		, NombreFemenino
		, NombreInversoMasculino
		, NombreInversoFemenino;
ELSE 
	SELECT IdTipoRelacion
		, NombreMasculino
		, NombreFemenino
	FROM IMVE.TbTiposRelaciones
    WHERE NombreInversoMasculino = ''
		AND NombreInversoFemenino = ''
	ORDER BY NombreMasculino
		, NombreFemenino;
END IF;
    
END //
DELIMITER ;

-- TbTiposRelacionesListarPorIdTipoRelacion
DROP PROCEDURE IF EXISTS IMVE.TbTiposRelacionesListarPorIdTipoRelacion;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposRelacionesListarPorIdTipoRelacion(
	p_IdTipoRelacion INT
)
BEGIN

SELECT IdTipoRelacion
	, NombreMasculino
    , NombreFemenino
    , NombreInversoMasculino
    , NombreInversoFemenino
FROM IMVE.TbTiposRelaciones
WHERE IdTipoRelacion = p_IdTipoRelacion
ORDER BY NombreMasculino
	, NombreFemenino
    , NombreInversoMasculino
    , NombreInversoFemenino;
    
END //
DELIMITER ;

-- TbTiposRelacionesPersonasListarPorPersona
DROP PROCEDURE IF EXISTS IMVE.TbTiposRelacionesPersonasListarPorPersona;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposRelacionesPersonasListarPorPersona(
	p_IdPersona INT
)
BEGIN

SELECT IdPersona
	, IdTipoRelacion
    , TipoRelacion
    , Relacion
FROM IMVE.RelacionesFamiliares
WHERE IdPersona = p_IdPersona;
    
END //
DELIMITER ;

-- TbTiposRelacionesAgregar
DROP PROCEDURE IF EXISTS IMVE.TbTiposRelacionesAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposRelacionesAgregar(
	p_NombreMasculino VARCHAR(20)
    , p_NombreFemenino VARCHAR(20)
    , p_NombreInversoMasculino VARCHAR(20)
    , p_NombreInversoFemenino VARCHAR(20)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbTiposRelaciones(
	NombreMasculino
    , NombreFemenino
    , NombreInversoMasculino
    , NombreInversoFemenino
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
)
VALUES
(
	p_NombreMasculino
    , p_NombreFemenino
    , p_NombreInversoMasculino
    , p_NombreInversoFemenino
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbTiposRelacionesModificar
DROP PROCEDURE IF EXISTS IMVE.TbTiposRelacionesModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposRelacionesModificar(
	p_IdTipoRelacion INT
	, p_NombreMasculino VARCHAR(20)
	, p_NombreFemenino VARCHAR(20)
    , p_NombreInversoMasculino VARCHAR(20)
    , p_NombreInversoFemenino VARCHAR(20)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbTiposRelaciones
SET NombreMasculino = p_NombreMasculino
	, NombreFemenino = p_NombreFemenino
    , NombreInversoMasculino = p_NombreInversoMasculino
    , NombreInversoFemenino = p_NombreInversoFemenino
    , UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdTipoRelacion = p_IdTipoRelacion;
    
END //
DELIMITER ;

-- TbTiposRelacionesEliminar
DROP PROCEDURE IF EXISTS IMVE.TbTiposRelacionesEliminar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposRelacionesEliminar(
	p_IdTipoRelacion INT
)
BEGIN

IF EXISTS (SELECT 1
			FROM IMVE.TbTiposRelacionesPersonas 
			WHERE IdTipoRelacion = p_IdTipoRelacion) THEN
		SELECT -1 AS Resultado;
ELSE 
	IF EXISTS (SELECT 1
				FROM IMVE.TbTiposRelaciones 
				WHERE IdTipoRelacion = p_IdTipoRelacion) THEN
		DELETE 
        FROM IMVE.TbTiposRelaciones 
		WHERE IdTipoRelacion = p_IdTipoRelacion;
        
        SELECT 1 AS Resultado;
	ELSE 
		SELECT -1 AS Resultado;
	END IF;
END IF;
    
END //
DELIMITER ;

-- TbTiposRelacionesPersonas
DROP PROCEDURE IF EXISTS IMVE.TbTiposRelacionesPersonasAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposRelacionesPersonasAgregar(
	p_IdTipoRelacion INT
    , p_IdPersonaRelacionado1 INT
    , p_IdPersonaRelacionado2 INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbTiposRelacionesPersonas(
	IdTipoRelacion
    , IdPersonaRelacionado1
    , IdPersonaRelacionado2
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
)
VALUES
(
	p_IdTipoRelacion
    , p_IdPersonaRelacionado1
    , p_IdPersonaRelacionado2
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbRolesUsuariosListar
DROP PROCEDURE IF EXISTS IMVE.TbRolesUsuariosListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbRolesUsuariosListar()
BEGIN

SELECT IdRolUsuario
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbRolesUsuarios
WHERE Activo = 'A'
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbRolesUsuariosListarEstado
DROP PROCEDURE IF EXISTS IMVE.TbRolesUsuariosListarEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbRolesUsuariosListarEstado(
	p_Estado CHAR(1)
)
BEGIN

SELECT IdRolUsuario
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbRolesUsuarios
WHERE Activo = p_Estado
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbRolesUsuariosListarPorIdRolUsuario
DROP PROCEDURE IF EXISTS IMVE.TbRolesUsuariosListarPorIdRolUsuario;

DELIMITER //
CREATE PROCEDURE IMVE.TbRolesUsuariosListarPorIdRolUsuario(
	p_IdRolUsuario INT
)
BEGIN

SELECT IdRolUsuario
	, Descripcion
    , Activo AS Estado
FROM IMVE.TbRolesUsuarios
WHERE IdRolUsuario = p_IdRolUsuario;
    
END //
DELIMITER ;

-- TbRolesUsuariosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbRolesUsuariosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbRolesUsuariosAgregar(
	p_Descripcion VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbRolesUsuarios(
	Descripcion
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_Descripcion
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbRolesUsuariosModificar
DROP PROCEDURE IF EXISTS IMVE.TbRolesUsuariosModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbRolesUsuariosModificar(
	p_IdRolUsuario INT
	, p_Descripcion VARCHAR(50)
    , p_Activo CHAR(1)
	, p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbRolesUsuarios
SET Descripcion = p_Descripcion
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
    , Activo = p_Activo
WHERE IdRolUsuario = p_IdRolUsuario;
    
END //
DELIMITER ;

-- TbRolesUsuariosDesactivar
DROP PROCEDURE IF EXISTS IMVE.TbRolesUsuariosDesactivar;

DELIMITER //
CREATE PROCEDURE IMVE.TbRolesUsuariosDesactivar(
	p_IdRolUsuario INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbRolesUsuarios
SET Activo = 'I'
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdRolUsuario = p_IdRolUsuario;
    
END //
DELIMITER ;

-- TbCategoriasListar
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasListar()
BEGIN

SELECT IdCategoria
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbCategorias
WHERE Activo = 'A'
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbCategoriasListarEstado
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasListarEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasListarEstado(
	p_Estado CHAR(1)
)
BEGIN

SELECT IdCategoria
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbCategorias
WHERE Activo = p_Estado
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbCategoriasListarPorIdCategoria
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasListarPorIdCategoria;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasListarPorIdCategoria(
	p_IdCategoria INT
)
BEGIN

SELECT IdCategoria
	, Descripcion
    , Activo AS Estado
FROM IMVE.TbCategorias
WHERE IdCategoria = p_IdCategoria;
    
END //
DELIMITER ;

-- TbCategoriasAgregar
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasAgregar(
	p_Descripcion VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbCategorias(
	Descripcion
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_Descripcion
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbCategoriasModificar
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasModificar(
	p_IdCategoria INT
	, p_Descripcion VARCHAR(50)
    , p_Activo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbCategorias
SET Descripcion = p_Descripcion
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
    , Activo = p_Activo
WHERE IdCategoria = p_IdCategoria;
    
END //
DELIMITER ;

-- TbCategoriasDesactivar
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasDesactivar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasDesactivar(
	p_IdCategoria INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbCategorias
SET Activo = 'I'
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdCategoria = p_IdCategoria;
    
END //
DELIMITER ;

-- TbCategoriasGruposListar
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasGruposListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasGruposListar()
BEGIN

SELECT IdCategoriaGrupo
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbCategoriasGrupos
WHERE Activo = 'A'
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbCategoriasGruposListarEstado
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasGruposListarEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasGruposListarEstado(
	p_Estado CHAR(1)
)
BEGIN

SELECT IdCategoriaGrupo
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbCategoriasGrupos
WHERE Activo = p_Estado
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbCategoriasGruposListarPorIdCategoriaGrupo
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasGruposListarPorIdCategoriaGrupo;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasGruposListarPorIdCategoriaGrupo(
	p_IdCategoriaGrupo INT
)
BEGIN

SELECT IdCategoriaGrupo
	, Descripcion
    , Activo AS Estado
FROM IMVE.TbCategoriasGrupos
WHERE IdCategoriaGrupo = p_IdCategoriaGrupo;
    
END //
DELIMITER ;

-- TbCategoriasGruposAgregar
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasGruposAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasGruposAgregar(
	p_Descripcion VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbCategoriasGrupos(
	Descripcion
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_Descripcion
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbCategoriasGruposModificar
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasGruposModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasGruposModificar(
	p_IdCategoriaGrupo INT
	, p_Descripcion VARCHAR(50)
    , p_Activo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbCategoriasGrupos
SET Descripcion = p_Descripcion
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
    , Activo = p_Activo
WHERE IdCategoriaGrupo = p_IdCategoriaGrupo;
    
END //
DELIMITER ;

-- TbCategoriasGruposDesactivar
DROP PROCEDURE IF EXISTS IMVE.TbCategoriasGruposDesactivar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCategoriasGruposDesactivar(
	p_IdCategoriaGrupo INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbCategoriasGrupos
SET Activo = 'I'
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdCategoriaGrupo = p_IdCategoriaGrupo;
    
END //
DELIMITER ;

-- TbTiposCompromisosListar
DROP PROCEDURE IF EXISTS IMVE.TbTiposCompromisosListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposCompromisosListar()
BEGIN

SELECT IdTipoCompromiso
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbTiposCompromisos
WHERE Activo = 'A'
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbTiposCompromisosListarEstado
DROP PROCEDURE IF EXISTS IMVE.TbTiposCompromisosListarEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposCompromisosListarEstado(
	p_Estado CHAR(1)
)
BEGIN

SELECT IdTipoCompromiso
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbTiposCompromisos
WHERE Activo = p_Estado
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbTiposCompromisosListarPorIdTipoCompromiso
DROP PROCEDURE IF EXISTS IMVE.TbTiposCompromisosListarPorIdTipoCompromiso;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposCompromisosListarPorIdTipoCompromiso(
	p_IdTipoCompromiso INT
)
BEGIN

SELECT IdTipoCompromiso
	, Descripcion
    , Activo AS Estado
FROM IMVE.TbTiposCompromisos
WHERE IdTipoCompromiso = p_IdTipoCompromiso;
    
END //
DELIMITER ;

-- TbTiposCompromisosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbTiposCompromisosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposCompromisosAgregar(
	p_Descripcion VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbTiposCompromisos(
	Descripcion
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_Descripcion
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbTiposCompromisosModificar
DROP PROCEDURE IF EXISTS IMVE.TbTiposCompromisosModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposCompromisosModificar(
	p_IdTipoCompromiso INT
	, p_Descripcion VARCHAR(50)
    , p_Activo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbTiposCompromisos
SET Descripcion = p_Descripcion
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
    , Activo = p_Activo
WHERE IdTipoCompromiso = p_IdTipoCompromiso;
    
END //
DELIMITER ;

-- TbTiposCompromisosDesactivar
DROP PROCEDURE IF EXISTS IMVE.TbTiposCompromisosDesactivar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposCompromisosDesactivar(
	p_IdTipoCompromiso INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbTiposCompromisos
SET Activo = 'I'
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdTipoCompromiso = p_IdTipoCompromiso;
    
END //
DELIMITER ;

-- TbMinisteriosListar
DROP PROCEDURE IF EXISTS IMVE.TbMinisteriosListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbMinisteriosListar()
BEGIN

SELECT IdMinisterio
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbMinisterios
WHERE Activo = 'A'
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbMinisteriosListarEstado
DROP PROCEDURE IF EXISTS IMVE.TbMinisteriosListarEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbMinisteriosListarEstado(
	p_Estado CHAR(1)
)
BEGIN

SELECT IdMinisterio
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbMinisterios
WHERE Activo = p_Estado
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbMinisteriosListarPorIdMinisterio
DROP PROCEDURE IF EXISTS IMVE.TbMinisteriosListarPorIdMinisterio;

DELIMITER //
CREATE PROCEDURE IMVE.TbMinisteriosListarPorIdMinisterio(
	p_IdMinisterio INT
)
BEGIN

SELECT IdMinisterio
	, Descripcion
    , Activo AS Estado
FROM IMVE.TbMinisterios
WHERE IdMinisterio = p_IdMinisterio;
    
END //
DELIMITER ;

-- TbMinisteriosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbMinisteriosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbMinisteriosAgregar(
	p_Descripcion VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbMinisterios(
	Descripcion
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_Descripcion
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbMinisteriosModificar
DROP PROCEDURE IF EXISTS IMVE.TbMinisteriosModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbMinisteriosModificar(
	p_IdMinisterio INT
	, p_Descripcion VARCHAR(50)
    , p_Activo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbMinisterios
SET Descripcion = p_Descripcion
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
    , Activo = p_Activo
WHERE IdMinisterio = p_IdMinisterio;
    
END //
DELIMITER ;

-- TbMinisteriosDesactivar
DROP PROCEDURE IF EXISTS IMVE.TbMinisteriosDesactivar;

DELIMITER //
CREATE PROCEDURE IMVE.TbMinisteriosDesactivar(
	p_IdMinisterio INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbMinisterios
SET Activo = 'I'
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdMinisterio = p_IdMinisterio;
    
END //
DELIMITER ;

-- TbTiposSeguimientosListar
DROP PROCEDURE IF EXISTS IMVE.TbTiposSeguimientosListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposSeguimientosListar()
BEGIN

SELECT IdTipoSeguimiento
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbTiposSeguimientos
WHERE Activo = 'A'
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbTiposSeguimientosListarEstado
DROP PROCEDURE IF EXISTS IMVE.TbTiposSeguimientosListarEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposSeguimientosListarEstado(
	p_Estado CHAR(1)
)
BEGIN

SELECT IdTipoSeguimiento
	, Descripcion
    , CASE Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbTiposSeguimientos
WHERE Activo = p_Estado
ORDER BY Descripcion;
    
END //
DELIMITER ;

-- TbTiposSeguimientosListarPorIdTipoSeguimiento
DROP PROCEDURE IF EXISTS IMVE.TbTiposSeguimientosListarPorIdTipoSeguimiento;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposSeguimientosListarPorIdTipoSeguimiento(
	p_IdTipoSeguimiento INT
)
BEGIN

SELECT IdTipoSeguimiento
	, Descripcion
    , Activo AS Estado
FROM IMVE.TbTiposSeguimientos
WHERE IdTipoSeguimiento = p_IdTipoSeguimiento;
    
END //
DELIMITER ;

-- TbTiposSeguimientosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbTiposSeguimientosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposSeguimientosAgregar(
	p_Descripcion VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbTiposSeguimientos(
	Descripcion
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_Descripcion
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbTiposSeguimientosModificar
DROP PROCEDURE IF EXISTS IMVE.TbTiposSeguimientosModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposSeguimientosModificar(
	p_IdTipoSeguimiento INT
	, p_Descripcion VARCHAR(50)
    , p_Activo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbTiposSeguimientos
SET Descripcion = p_Descripcion
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
    , Activo = p_Activo
WHERE IdTipoSeguimiento = p_IdTipoSeguimiento;
    
END //
DELIMITER ;

-- TbTiposSeguimientosDesactivar
DROP PROCEDURE IF EXISTS IMVE.TbTiposSeguimientosDesactivar;

DELIMITER //
CREATE PROCEDURE IMVE.TbTiposSeguimientosDesactivar(
	p_IdTipoSeguimiento INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbTiposSeguimientos
SET Activo = 'I'
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdTipoSeguimiento = p_IdTipoSeguimiento;
    
END //
DELIMITER ;

-- TbPersonasListar
DROP PROCEDURE IF EXISTS IMVE.TbPersonasListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasListar()
BEGIN

SELECT P.IdPersona
	, P.Identificacion
    , P.Nombre
    , P.Apellido1
    , P.Apellido2
    , CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
    , P.FechaNacimiento
    , CONCAT(D.Descripcion,', ',C.Descripcion,', ',PR.Descripcion,', ',PA.Descripcion) AS Distrito
    , P.DireccionDomicilio
    , P.Telefono
    , P.Celular
    , P.Correo
    , CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
    , CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbPersonas AS P
LEFT JOIN IMVE.TbDistritos AS D 
	ON P.IdDistrito = D.IdDistrito
LEFT JOIN IMVE.TbCantones AS C
	ON D.IdCanton = C.IdCanton
    AND D.IdProvincia = C.IdProvincia
    AND D.IdPais = C.IdPais
LEFT JOIN IMVE.TbProvincias AS PR
	ON C.IdProvincia = PR.IdProvincia
    AND C.IdPais = PR.IdPais
LEFT JOIN IMVE.TbPaises AS PA
	ON PR.IdPais = PA.IdPais
WHERE P.Activo = 'A'
	AND P.IdPersona <> 1
ORDER BY NombreCompleto;

END //
DELIMITER ;

-- TbPersonasListarPorIdPersona
DROP PROCEDURE IF EXISTS IMVE.TbPersonasListarPorIdPersona;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasListarPorIdPersona(
	p_IdPersona INT
)
BEGIN

SELECT P.IdPersona
	, P.Identificacion
    , P.Nombre
    , P.Apellido1
    , P.Apellido2
    , P.FechaNacimiento
    , D.IdDistrito AS Distrito
    , D.IdCanton AS Canton
    , D.IdProvincia AS Provincia
    , P.DireccionDomicilio
    , P.Telefono
    , P.Celular
    , P.Correo
    , P.Sexo AS Sexo
    , P.Activo AS Estado
FROM IMVE.TbPersonas AS P
LEFT JOIN IMVE.TbDistritos AS D 
	ON P.IdDistrito = D.IdDistrito
LEFT JOIN IMVE.TbCantones AS C
	ON D.IdCanton = C.IdCanton
    AND D.IdProvincia = C.IdProvincia
    AND D.IdPais = C.IdPais
LEFT JOIN IMVE.TbProvincias AS PR
	ON C.IdProvincia = PR.IdProvincia
    AND C.IdPais = PR.IdPais
LEFT JOIN IMVE.TbPaises AS PA
	ON PR.IdPais = PA.IdPais
WHERE P.IdPersona = p_IdPersona;

END //
DELIMITER ;

-- TbPersonasListarPorOrdenamientoEstado
DROP PROCEDURE IF EXISTS IMVE.TbPersonasListarPorOrdenamientoEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasListarPorOrdenamientoEstado(
	p_Ordenamiento CHAR(1)
    , p_Estado CHAR(1)
)
BEGIN

IF p_Ordenamiento = 'N' THEN
	SELECT P.IdPersona
		, P.Identificacion
		, P.Nombre
		, P.Apellido1
		, P.Apellido2
		, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
		, P.FechaNacimiento
		, CONCAT(D.Descripcion,', ',C.Descripcion,', ',PR.Descripcion,', ',PA.Descripcion) AS Distrito
		, P.DireccionDomicilio
		, P.Telefono
		, P.Celular
		, P.Correo
		, CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
		, CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
	FROM IMVE.TbPersonas AS P
    LEFT JOIN IMVE.TbDistritos AS D
		ON P.IdDistrito = D.IdDistrito
	LEFT JOIN IMVE.TbCantones AS C
		ON D.IdCanton = C.IdCanton
		AND D.IdProvincia = C.IdProvincia
		AND D.IdPais = C.IdPais
	LEFT JOIN IMVE.TbProvincias AS PR
		ON C.IdProvincia = PR.IdProvincia
		AND C.IdPais = PR.IdPais
	LEFT JOIN IMVE.TbPaises AS PA
		ON PR.IdPais = PA.IdPais
	WHERE P.Activo = p_Estado
		AND P.IdPersona <> 1
	ORDER BY NombreCompleto;
ELSE
	SELECT P.IdPersona
		, P.Identificacion
		, P.Nombre
		, P.Apellido1
		, P.Apellido2
		, CONCAT(P.Apellido1,' ',P.Apellido2, ' ',P.Nombre) AS NombreCompleto
		, P.FechaNacimiento
		, CONCAT(D.Descripcion,', ',C.Descripcion,', ',PR.Descripcion,', ',PA.Descripcion) AS Distrito
		, P.DireccionDomicilio
		, P.Telefono
		, P.Celular
		, P.Correo
		, CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
		, CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
	FROM IMVE.TbPersonas AS P
	LEFT JOIN IMVE.TbDistritos AS D 
		ON P.IdDistrito = D.IdDistrito
	LEFT JOIN IMVE.TbCantones AS C
		ON D.IdCanton = C.IdCanton
		AND D.IdProvincia = C.IdProvincia
		AND D.IdPais = C.IdPais
	LEFT JOIN IMVE.TbProvincias AS PR
		ON C.IdProvincia = PR.IdProvincia
		AND C.IdPais = PR.IdPais
	LEFT JOIN IMVE.TbPaises AS PA
		ON PR.IdPais = PA.IdPais
	WHERE P.Activo = p_Estado
        AND P.IdPersona <> 1
	ORDER BY NombreCompleto;
END IF;

END //
DELIMITER ;

-- TbPersonasListarCelularesCorreos
DROP PROCEDURE IF EXISTS IMVE.TbPersonasListarCelularesCorreos;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasListarCelularesCorreos(
	p_Accion CHAR(1)
)
BEGIN

IF p_Accion = 'S' THEN
	SELECT P.IdPersona
		, P.Identificacion
		, P.Nombre
		, P.Apellido1
		, P.Apellido2
		, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
		, P.FechaNacimiento
		, P.DireccionDomicilio
		, P.Celular
		, CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
		, CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
	FROM IMVE.TbPersonas AS P
	INNER JOIN IMVE.TbUsuarios AS U
		ON P.IdPersona = U.IdPersona
	INNER JOIN IMVE.TbRolesUsuarios AS RU
		ON U.IdRolUsuario = RU.IdRolUsuario
	WHERE RU.Descripcion <> 'SuperAdmin'
		AND P.Activo = 'A'
		AND P.Celular <> ''
	ORDER BY NombreCompleto;
ELSE 
	SELECT P.IdPersona
		, P.Identificacion
		, P.Nombre
		, P.Apellido1
		, P.Apellido2
		, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
		, P.FechaNacimiento
		, P.DireccionDomicilio
		, P.Correo
		, CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
		, CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
	FROM IMVE.TbPersonas AS P
	INNER JOIN IMVE.TbUsuarios AS U
		ON P.IdPersona = U.IdPersona
	INNER JOIN IMVE.TbRolesUsuarios AS RU
		ON U.IdRolUsuario = RU.IdRolUsuario
	WHERE RU.Descripcion <> 'SuperAdmin'
		AND P.Activo = 'A'
		AND P.Correo <> ''
	ORDER BY NombreCompleto;
END IF;

END //
DELIMITER ;

-- TbPersonasListarActivosInactivos
DROP PROCEDURE IF EXISTS IMVE.TbPersonasListarActivosInactivos;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasListarActivosInactivos(
	p_Estado CHAR(1)
)
BEGIN

SELECT P.IdPersona
	, P.Identificacion
    , P.Nombre
	, P.Apellido1
	, P.Apellido2
	, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
	, P.FechaNacimiento
	, P.DireccionDomicilio
	, P.Celular
	, CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
	, CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbPersonas AS P
LEFT JOIN IMVE.TbUsuarios AS U
	ON P.IdPersona = U.IdPersona
LEFT JOIN IMVE.TbRolesUsuarios AS RU
	ON U.IdRolUsuario = RU.IdRolUsuario
WHERE P.IdPersona <> 1
	AND P.Activo = p_Estado
ORDER BY NombreCompleto;

END //
DELIMITER ;

-- TbPersonasListarSinUsuario
DROP PROCEDURE IF EXISTS IMVE.TbPersonasListarSinUsuario;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasListarSinUsuario()
BEGIN

SELECT P.IdPersona
	, U.Contrasena
    , P.Identificacion
    , P.Nombre
    , P.Apellido1
    , P.Apellido2
    , CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
    , P.Correo
    , CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
    , CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbUsuarios AS U 
RIGHT JOIN IMVE.TbPersonas AS P
	ON U.IdPersona = P.IdPersona
WHERE U.Contrasena IS NULL
ORDER BY NombreCompleto;

END //
DELIMITER ;

-- TbPersonasAgregar
DROP PROCEDURE IF EXISTS IMVE.TbPersonasAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasAgregar(
	p_Identificacion VARCHAR(30)
    , p_Nombre VARCHAR(20)
    , p_Apellido1 VARCHAR(20)
    , p_Apellido2 VARCHAR(20)
    , p_FechaNacimiento DATETIME
    , p_IdDistrito INT
    , p_DireccionDomicilio VARCHAR(250)
    , p_Telefono VARCHAR(10)
    , p_Celular VARCHAR(10)
    , p_Correo VARCHAR(50)
    , p_Sexo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbPersonas(
	Identificacion
    , Nombre
    , Apellido1
    , Apellido2
    , FechaNacimiento
    , IdDistrito
    , DireccionDomicilio
    , Telefono
    , Celular
    , Correo
    , Sexo
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_Identificacion
    , p_Nombre
    , p_Apellido1
    , p_Apellido2
    , p_FechaNacimiento
    , p_IdDistrito
    , p_DireccionDomicilio
    , p_Telefono
    , p_Celular
    , p_Correo
    , p_Sexo
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;
    
END //
DELIMITER ;

-- TbPersonasModificar
DROP PROCEDURE IF EXISTS IMVE.TbPersonasModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasModificar(
	p_IdPersona INT
    , p_Identificacion VARCHAR(30)
    , p_Nombre VARCHAR(20)
    , p_Apellido1 VARCHAR(20)
    , p_Apellido2 VARCHAR(20)
    , p_FechaNacimiento DATETIME
    , p_IdDistrito INT
    , p_DireccionDomicilio VARCHAR(250)
    , p_Telefono VARCHAR(10)
    , p_Celular VARCHAR(10)
    , p_Correo VARCHAR(50)
    , p_Sexo CHAR(1)
    , p_Activo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbPersonas
SET Identificacion = p_Identificacion
	, Nombre = p_Nombre
    , Apellido1 = p_Apellido1
    , Apellido2 = p_Apellido2
    , FechaNacimiento = p_FechaNacimiento
    , IdDistrito = p_IdDistrito
    , DireccionDomicilio = p_DireccionDomicilio
    , Telefono = p_Telefono
    , Celular = p_Celular
    , Correo = p_Correo
    , Sexo = p_Sexo
    , UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
    , Activo = p_Activo
WHERE IdPersona = p_IdPersona;
    
END //
DELIMITER ;

-- TbPersonasActualizarEstado
DROP PROCEDURE IF EXISTS IMVE.TbPersonasActualizarEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasActualizarEstado(
	p_estado CHAR(1)
	, p_idPersona INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE TbPersonas
SET Activo = p_estado
    , UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdPersona = p_idPersona;

END //
DELIMITER ;

-- TbPersonasDesactivar
DROP PROCEDURE IF EXISTS IMVE.TbPersonasDesactivar;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasDesactivar(
	p_IdPersona INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbPersonas
SET Activo = 'I'
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
    , FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdPersona = p_IdPersona;
    
END //
DELIMITER ;

-- TbGruposListar
DROP PROCEDURE IF EXISTS IMVE.TbGruposListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposListar()
BEGIN

SELECT G.IdGrupo
	, CG.Descripcion AS Categoria
    , M.Descripcion AS Ministerio
    , G.Descripcion
    , CASE G.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbGrupos AS G
INNER JOIN IMVE.TbCategoriasGrupos AS CG
	ON G.IdCategoriaGrupo = CG.IdCategoriaGrupo
LEFT JOIN IMVE.TbMinisterios AS M
	ON G.IdMinisterio = M.IdMinisterio
WHERE G.Activo = 'A'
ORDER BY G.Descripcion;
    
END //
DELIMITER ;

-- TbGruposListarPorEstado
DROP PROCEDURE IF EXISTS IMVE.TbGruposListarPorEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposListarPorEstado(
	p_Estado CHAR(1)
)
BEGIN

SELECT G.IdGrupo
	, CG.Descripcion AS Categoria
    , M.Descripcion AS Ministerio
    , G.Descripcion
    , CASE G.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbGrupos AS G
INNER JOIN IMVE.TbCategoriasGrupos AS CG
	ON G.IdCategoriaGrupo = CG.IdCategoriaGrupo
LEFT JOIN IMVE.TbMinisterios AS M
	ON G.IdMinisterio = M.IdMinisterio
WHERE G.Activo = p_Estado;
    
END //
DELIMITER ;

-- TbGruposListarPorIdGrupo
DROP PROCEDURE IF EXISTS IMVE.TbGruposListarPorIdGrupo;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposListarPorIdGrupo(
	p_IdGrupo INT
)
BEGIN

SELECT G.IdGrupo
	, CG.IdCategoriaGrupo
	, CG.Descripcion AS Categoria
    , M.IdMinisterio
    , M.Descripcion AS Ministerio
    , G.Descripcion
    , G.Activo AS Estado
FROM IMVE.TbGrupos AS G
INNER JOIN IMVE.TbCategoriasGrupos AS CG
	ON G.IdCategoriaGrupo = CG.IdCategoriaGrupo
LEFT JOIN IMVE.TbMinisterios AS M
	ON G.IdMinisterio = M.IdMinisterio
WHERE G.IdGrupo = p_IdGrupo;
    
END //
DELIMITER ;

-- TbGruposAgregar
DROP PROCEDURE IF EXISTS IMVE.TbGruposAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposAgregar(
	p_IdCategoriaGrupo INT
	, p_IdMinisterio INT
	, p_Descripcion VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbGrupos(
	IdCategoriaGrupo
    , IdMinisterio
	, Descripcion
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_IdCategoriaGrupo
	, p_IdMinisterio
	, p_Descripcion
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbGruposModificar
DROP PROCEDURE IF EXISTS IMVE.TbGruposModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposModificar(
	p_IdGrupo INT
    , p_IdCategoriaGrupo INT
    , p_IdMinisterio INT
    , p_Descripcion VARCHAR(50)
    , p_Activo CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbGrupos
SET IdCategoriaGrupo = p_IdCategoriaGrupo
	, IdMinisterio = p_IdMinisterio
	, Descripcion = p_Descripcion
    , Activo = p_Activo
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
	, FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdGrupo = p_IdGrupo;

END //
DELIMITER ;

-- TbVisitasModificar
DROP PROCEDURE IF EXISTS IMVE.TbVisitasModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbVisitasModificar(
	p_IdVisita INT
    , p_IdMinisterio INT
    , p_Descripcion VARCHAR(50)
    , p_FechaVisita DATETIME
    , p_Cerrada CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbVisitas
SET  IdMinisterio = p_IdMinisterio
	, Descripcion = p_Descripcion
    , FechaVisita = p_FechaVisita
    , Cerrada = p_Cerrada
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
	, FechaUltimaModificacion = CURRENT_TIMESTAMP()
WHERE IdVisita = p_IdVisita;

END //
DELIMITER ;

-- TbGruposPersonasAgregar
DROP PROCEDURE IF EXISTS IMVE.TbGruposPersonasAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposPersonasAgregar(
	p_IdPersona INT
    , p_IdGrupo INT
    , p_EsLider CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbGruposPersonas(
	IdPersona
    , IdGrupo
    , EsLider
    , FechaInicio
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_IdPersona
	, p_IdGrupo
	, p_EsLider
    , CURRENT_TIMESTAMP()
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbPersonasVisitasEliminar
DROP PROCEDURE IF EXISTS IMVE.TbPersonasVisitasEliminar;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasVisitasEliminar(
	p_IdVisita INT
    , p_IdPersona INT
)
BEGIN

DELETE
FROM IMVE.TbPersonasVisitas
WHERE IdVisita = p_IdVisita
	AND IdPersona = p_IdPersona;

END //
DELIMITER ;

-- TbGruposPersonasModificar
DROP PROCEDURE IF EXISTS IMVE.TbGruposPersonasModificar;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposPersonasModificar(
	p_IdPersona INT
    , p_IdGrupo INT
    , p_EsLider CHAR(1)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

UPDATE IMVE.TbGruposPersonas
SET FechaFin = CURRENT_TIMESTAMP()
	, UsuarioUltimaModificacion = p_UsuarioUltimaModificacion
	, FechaUltimaModificacion = CURRENT_TIMESTAMP()
    , Activo = 'N'
WHERE IdPersona = p_IdPersona
	AND IdGrupo = p_IdGrupo
    AND EsLider = p_EsLider;

END //
DELIMITER ;

-- TbGruposPersonasListarPorIdPersonaLider
DROP PROCEDURE IF EXISTS IMVE.TbGruposPersonasListarPorIdPersonaLider;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposPersonasListarPorIdPersonaLider(
	p_IdPersona INT
)
BEGIN

SELECT GP.IdPersona
	, GP.IdGrupo AS GrupoLider
	, G.Descripcion
    , GP.EsLider
    , GP.FechaInicio
    , GP.FechaFin
    , GP.Activo AS Estado
FROM IMVE.TbGruposPersonas AS GP
INNER JOIN IMVE.TbGrupos AS G
	ON GP.IdGrupo = G.IdGrupo
INNER JOIN IMVE.TbPersonas AS P
	ON GP.IdPersona = P.IdPersona
WHERE GP.IdPersona = p_IdPersona
	AND GP.EsLider = 'S' 
    AND GP.FechaFin IS NULL
    AND G.Activo = 'A'
    AND P.Activo = 'A';

END //
DELIMITER ;

-- TbGruposPersonasListarPorIdPersonaParticipante
DROP PROCEDURE IF EXISTS IMVE.TbGruposPersonasListarPorIdPersonaParticipante;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposPersonasListarPorIdPersonaParticipante(
	p_IdPersona INT
)
BEGIN

SELECT GP.IdPersona
	, GP.IdGrupo AS GrupoParticipante
	, G.Descripcion
    , GP.EsLider
    , GP.FechaInicio
    , GP.FechaFin
    , GP.Activo AS Estado
FROM IMVE.TbGruposPersonas AS GP
INNER JOIN IMVE.TbGrupos AS G
	ON GP.IdGrupo = G.IdGrupo
INNER JOIN IMVE.TbPersonas AS P
	ON GP.IdPersona = P.IdPersona
WHERE GP.IdPersona = p_IdPersona
	AND GP.EsLider = 'N' 
    AND GP.FechaFin IS NULL
    AND G.Activo = 'A'
    AND P.Activo = 'A';

END //
DELIMITER ;

-- TbGruposPersonasListarPersonasPorIdGrupo
DROP PROCEDURE IF EXISTS IMVE.TbGruposPersonasListarPersonasPorIdGrupo;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposPersonasListarPersonasPorIdGrupo(
	p_IdGrupo INT
)
BEGIN

SELECT GP.IdGrupo
	, GP.IdPersona AS PersonaParticipante
    , CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
    , P.Telefono
    , P.Celular
    , P.Correo
    , GP.FechaInicio
    , GP.FechaFin
    , GP.EsLider
FROM IMVE.TbGruposPersonas AS GP
INNER JOIN IMVE.TbGrupos AS G
	ON GP.IdGrupo = G.IdGrupo
INNER JOIN IMVE.TbPersonas AS P
	ON GP.IdPersona = P.IdPersona
WHERE GP.IdGrupo = p_IdGrupo
    AND GP.FechaFin IS NULL
    AND G.Activo = 'A'
    AND P.Activo = 'A';

END //
DELIMITER ;

-- TbGruposPersonasListarPorIdGrupoLideres
DROP PROCEDURE IF EXISTS IMVE.TbGruposPersonasListarPorIdGrupoLideres;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposPersonasListarPorIdGrupoLideres(
	p_IdGrupo INT
)
BEGIN

SELECT GP.IdGrupo
	, GP.IdPersona AS PersonaLider
    , CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
    , P.Telefono
    , P.Celular
    , P.Correo
    , GP.FechaInicio
    , GP.FechaFin
    , GP.EsLider
FROM IMVE.TbGruposPersonas AS GP
INNER JOIN IMVE.TbGrupos AS G
	ON GP.IdGrupo = G.IdGrupo
INNER JOIN IMVE.TbPersonas AS P
	ON GP.IdPersona = P.IdPersona
WHERE GP.IdGrupo = p_IdGrupo
	AND GP.EsLider = 'S' 
    AND GP.FechaFin IS NULL
    AND G.Activo = 'A'
    AND P.Activo = 'A';

END //
DELIMITER ;

-- TbGruposPersonasListarPorIdGrupoParticipantes
DROP PROCEDURE IF EXISTS IMVE.TbGruposPersonasListarPorIdGrupoParticipantes;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposPersonasListarPorIdGrupoParticipantes(
	p_IdGrupo INT
)
BEGIN

SELECT GP.IdGrupo
	, GP.IdPersona AS PersonaParticipante
    , CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
    , P.Telefono
    , P.Celular
    , P.Correo
    , GP.FechaInicio
    , GP.FechaFin
    , GP.EsLider
FROM IMVE.TbGruposPersonas AS GP
INNER JOIN IMVE.TbGrupos AS G
	ON GP.IdGrupo = G.IdGrupo
INNER JOIN IMVE.TbPersonas AS P
	ON GP.IdPersona = P.IdPersona
WHERE GP.IdGrupo = p_IdGrupo
	AND GP.EsLider = 'N' 
    AND GP.FechaFin IS NULL
    AND G.Activo = 'A'
    AND P.Activo = 'A';

END //
DELIMITER ;

-- TbGruposPersonasListarPorEsLider
DROP PROCEDURE IF EXISTS IMVE.TbGruposPersonasListarPorEsLider;

DELIMITER //
CREATE PROCEDURE IMVE.TbGruposPersonasListarPorEsLider(
	p_EsLider CHAR(1)
)
BEGIN

IF p_EsLider <> '' THEN
	SELECT DISTINCT P.IdPersona
		, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
		, P.Telefono
		, P.Celular
		, P.Correo
		, GP.FechaInicio
		, GP.FechaFin
		, GP.EsLider
	FROM IMVE.TbGruposPersonas AS GP
	INNER JOIN IMVE.TbGrupos AS G
		ON GP.IdGrupo = G.IdGrupo
	INNER JOIN IMVE.TbPersonas AS P
		ON GP.IdPersona = P.IdPersona
	WHERE GP.EsLider = p_EsLider
		AND GP.FechaFin IS NULL
		AND G.Activo = 'A'
		AND P.Activo = 'A'
	ORDER BY NombreCompleto;
ELSE 
	SELECT DISTINCT P.IdPersona
		, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
		, P.Telefono
		, P.Celular
		, P.Correo
		, GP.FechaInicio
		, GP.FechaFin
	FROM IMVE.TbGruposPersonas AS GP
	INNER JOIN IMVE.TbGrupos AS G
		ON GP.IdGrupo = G.IdGrupo
	INNER JOIN IMVE.TbPersonas AS P
		ON GP.IdPersona = P.IdPersona
	WHERE GP.FechaFin IS NULL
		AND G.Activo = 'A'
		AND P.Activo = 'A'
	ORDER BY NombreCompleto;
END IF;

END //
DELIMITER ;

-- TbCompromisosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbCompromisosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbCompromisosAgregar(
	p_IdMinisterio INT
    , p_IdTipoCompromiso INT
    , p_Descripcion VARCHAR(50)
    , p_FechaInicio DATETIME
    , p_FechaFinal DATETIME
    , p_Lugar VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbCompromisos(
	IdMinisterio
    , IdTipoCompromiso
    , Descripcion
    , FechaInicio
    , FechaFinal
    , Lugar
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_IdMinisterio
    , p_IdTipoCompromiso
    , p_Descripcion
    , p_FechaInicio
    , p_FechaFinal
    , p_Lugar
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbParticipantesCompromisosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbParticipantesCompromisosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbParticipantesCompromisosAgregar(
	p_IdPersona INT
    , p_IdCompromiso INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbParticipantesCompromisos(
	IdPersona
    , IdCompromiso
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
)
VALUES
(
	p_IdPersona
    , p_IdCompromiso
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbReponsablesGruposCompromisosListar
DROP PROCEDURE IF EXISTS IMVE.TbReponsablesGruposCompromisosListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbReponsablesGruposCompromisosListar()
BEGIN

SELECT RGP.IdCompromiso
	, RGP.IdGrupo
	, G.Descripcion
FROM IMVE.TbReponsablesGruposCompromisos AS RGP
INNER JOIN IMVE.TbGrupos AS G
	ON RGP.IdGrupo = G.IdGrupo;

END //
DELIMITER ;

-- TbReponsablesGruposCompromisosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbReponsablesGruposCompromisosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbReponsablesGruposCompromisosAgregar(
	p_IdGrupo INT
    , p_IdCompromiso INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbReponsablesGruposCompromisos(
	 IdGrupo
    , IdCompromiso
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
)
VALUES
(
	p_IdGrupo
    , p_IdCompromiso
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbResponsablesCompromisosListar
DROP PROCEDURE IF EXISTS IMVE.TbResponsablesCompromisosListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbResponsablesCompromisosListar()
BEGIN

SELECT RC.IdCompromiso
	, RC.IdPersona
	, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
FROM IMVE.TbResponsablesCompromisos AS RC
INNER JOIN IMVE.TbPersonas AS P
	ON RC.IdPersona = P.IdPersona;

END //
DELIMITER ;

-- TbResponsablesCompromisosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbResponsablesCompromisosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbResponsablesCompromisosAgregar(
	p_IdPersona INT
    , p_IdCompromiso INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbResponsablesCompromisos(
	IdPersona 
    , IdCompromiso
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
)
VALUES
(
	p_IdPersona
    , p_IdCompromiso
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbVisitasListar
DROP PROCEDURE IF EXISTS IMVE.TbVisitasListar;

DELIMITER //
CREATE PROCEDURE IMVE.TbVisitasListar()
BEGIN

SELECT V.IdVisita
	, V.IdMinisterio
    , M.Descripcion AS Ministerio
    , V.Descripcion
    , V.FechaVisita
    , CASE V.Cerrada WHEN 'S' THEN 'Cerrada' ELSE 'Abierta' END AS Estado
FROM IMVE.TbVisitas AS V
INNER JOIN IMVE.TbMinisterios AS M
	ON V.IdMinisterio = M.IdMinisterio;

END //
DELIMITER ;

-- TbVisitasListarPorEstado
DROP PROCEDURE IF EXISTS IMVE.TbVisitasListarPorEstado;

DELIMITER //
CREATE PROCEDURE IMVE.TbVisitasListarPorEstado(
	p_Estado CHAR(1)
)
BEGIN

SELECT V.IdVisita
	, V.IdMinisterio
    , M.Descripcion AS Ministerio
    , V.Descripcion
    , V.FechaVisita
    , V.Cerrada AS Estado
FROM IMVE.TbVisitas AS V
INNER JOIN IMVE.TbMinisterios AS M
	ON V.IdMinisterio = M.IdMinisterio
WHERE V.Cerrada = p_Estado;

END //
DELIMITER ;

-- TbVisitasListarPorIdVisita
DROP PROCEDURE IF EXISTS IMVE.TbVisitasListarPorIdVisita;

DELIMITER //
CREATE PROCEDURE IMVE.TbVisitasListarPorIdVisita(
	p_IdVisita INT
)
BEGIN

SELECT V.IdVisita
	, V.IdMinisterio
    , M.Descripcion AS Ministerio
    , V.Descripcion
    , V.FechaVisita
    , V.Cerrada AS Estado
FROM IMVE.TbVisitas AS V
INNER JOIN IMVE.TbMinisterios AS M
	ON V.IdMinisterio = M.IdMinisterio
WHERE IdVisita = p_IdVisita;

END //
DELIMITER ;

-- TbVisitasAgregar
DROP PROCEDURE IF EXISTS IMVE.TbVisitasAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbVisitasAgregar(
	p_IdMinisterio INT
    , p_Descripcion VARCHAR(50)
    , p_FechaVisita DATETIME
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbVisitas(
	IdMinisterio
    , Descripcion
    , FechaVisita
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Cerrada
)
VALUES
(
	p_IdMinisterio
    , p_Descripcion
    , p_FechaVisita
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'N'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbPersonasVisitasPorIdVisita
DROP PROCEDURE IF EXISTS IMVE.TbPersonasVisitasPorIdVisita;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasVisitasPorIdVisita(
	p_IdVisita INT
)
BEGIN

SELECT IdVisita
	, IdPersona
FROM IMVE.TbPersonasVisitas
WHERE IdVisita = p_IdVisita;

END //
DELIMITER ;

-- TbPersonasVisitasAgregar
DROP PROCEDURE IF EXISTS IMVE.TbPersonasVisitasAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbPersonasVisitasAgregar(
	p_IdVisita INT
    , p_IdPersona INT
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbPersonasVisitas(
	IdVisita
    , IdPersona
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
)
VALUES
(
	p_IdVisita
    , p_IdPersona
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- TbSeguimientosListarPorVisita
DROP PROCEDURE IF EXISTS IMVE.TbSeguimientosListarPorVisita;

DELIMITER //
CREATE PROCEDURE IMVE.TbSeguimientosListarPorVisita(
	p_IdVisita INT
    , p_Estado CHAR(1)
)
BEGIN

SELECT S.IdSeguimiento
	, S.IdVisita
    , V.Descripcion AS Visita
	, S.IdMinisterio
    , M.Descripcion AS Ministerio
	, S.IdPersonaResponsable
    , CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
	, S.IdTipoSeguimiento
    , TS.Descripcion AS TipoSeguimiento
	, S.Descripcion
	, S.FechaPropuesta
	, S.FechaPropuesta
	, S.FechaRealizacion
	, S.Observaciones
    , CASE S.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
FROM IMVE.TbSeguimientos AS S
INNER JOIN IMVE.TbVisitas AS V
	ON S.IdVisita = V.IdVisita
INNER JOIN IMVE.TbMinisterios AS M
	ON S.IdMinisterio = M.IdMinisterio
INNER JOIN IMVE.TbPersonas AS P
	ON S.IdPersonaResponsable = P.IdPersona
INNER JOIN IMVE.TbTiposSeguimientos AS TS
	ON S.IdTipoSeguimiento = TS.IdTipoSeguimiento
WHERE S.IdVisita = p_IdVisita
	AND S.Activo = p_Estado
ORDER BY Descripcion;

END //
DELIMITER ;

-- TbSeguimientosAgregar
DROP PROCEDURE IF EXISTS IMVE.TbSeguimientosAgregar;

DELIMITER //
CREATE PROCEDURE IMVE.TbSeguimientosAgregar(
	p_IdVisita INT
    , p_IdMinisterio INT
    , p_IdPersonaResponsable INT
    , p_IdTipoSeguimiento INT
    , p_Descripcion VARCHAR(50)
    , p_FechaPropuesta DATETIME
    , p_FechaRealizacion DATETIME
    , p_Observaciones VARCHAR(50)
    , p_UsuarioUltimaModificacion INT
)
BEGIN

INSERT INTO IMVE.TbSeguimientos(
	IdVisita
    , IdMinisterio
    , IdPersonaResponsable
    , IdTipoSeguimiento
    , Descripcion
    , FechaPropuesta
    , FechaRealizacion
    , Observaciones
    , UsuarioUltimaModificacion
    , FechaUltimaModificacion
    , Activo
)
VALUES
(
	p_IdVisita
    , p_IdMinisterio
    , p_IdPersonaResponsable
    , p_IdTipoSeguimiento
    , p_Descripcion
    , p_FechaPropuesta
    , p_FechaRealizacion
    , p_Observaciones
    , p_UsuarioUltimaModificacion
    , CURRENT_TIMESTAMP()
    , 'A'
);

SELECT LAST_INSERT_ID() AS Id;

END //
DELIMITER ;

-- ReportePersonasFechasVisitas
DROP PROCEDURE IF EXISTS IMVE.ReportePersonasFechasVisitas;

DELIMITER //
CREATE PROCEDURE IMVE.ReportePersonasFechasVisitas(
	p_FechaInicio DATETIME
    , p_FechaFin DATETIME
)
BEGIN

SELECT PV.IdVisita
	, PV.IdPersona
    , P.NombreCompleto AS Persona
    , P.Distrito
    , P.Telefono
    , P.Celular
    , P.Correo
    , P.Sexo
	, V.Descripcion AS Visita
    , M.Descripcion AS Ministerio
    , V.FechaVisita
    , CASE V.Cerrada WHEN 'N' THEN 'Abierta' ELSE 'Cerrada' END AS Estado
FROM IMVE.TbVisitas AS V
INNER JOIN IMVE.TbPersonasVisitas AS PV
	ON PV.IdVisita = V.IdVisita
INNER JOIN IMVE.TbMinisterios AS M
	ON V.IdMinisterio = M.IdMinisterio
INNER JOIN (SELECT P.IdPersona
				, P.Identificacion
				, P.Nombre
				, P.Apellido1
				, P.Apellido2
				, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
				, P.FechaNacimiento
				, CONCAT(D.Descripcion,', ',C.Descripcion,', ',PR.Descripcion,', ',PA.Descripcion) AS Distrito
				, P.DireccionDomicilio
				, P.Telefono
				, P.Celular
				, P.Correo
				, CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
				, CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
			FROM IMVE.TbPersonas AS P
			LEFT JOIN IMVE.TbDistritos AS D 
				ON P.IdDistrito = D.IdDistrito
			LEFT JOIN IMVE.TbCantones AS C
				ON D.IdCanton = C.IdCanton
				AND D.IdProvincia = C.IdProvincia
				AND D.IdPais = C.IdPais
			LEFT JOIN IMVE.TbProvincias AS PR
				ON C.IdProvincia = PR.IdProvincia
				AND C.IdPais = PR.IdPais
			LEFT JOIN IMVE.TbPaises AS PA
				ON PR.IdPais = PA.IdPais
			WHERE P.Activo = 'A'
				AND P.IdPersona <> 1
			ORDER BY NombreCompleto) AS P
	ON PV.IdPersona = P.IdPersona
WHERE V.FechaVisita BETWEEN p_FechaInicio AND p_FechaFin;

END //
DELIMITER ;

-- ReporteCompromisosResponsables
DROP PROCEDURE IF EXISTS IMVE.ReporteCompromisosResponsables;

DELIMITER //
CREATE PROCEDURE IMVE.ReporteCompromisosResponsables(
	p_FechaInicio DATETIME
    , p_FechaFin DATETIME
    , p_TipoReponsable CHAR(1)
)
BEGIN

IF p_TipoReponsable = 'P' THEN
	SELECT C.IdCompromiso
		, C.Descripcion AS Compromiso
		, TC.Descripcion AS TipoCompromiso
		, M.Descripcion AS Ministerio
		, P.NombreCompleto AS Responsable
		, C.FechaInicio
		, C.FechaFinal
		, C.Lugar
		, CASE C.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
	FROM IMVE.TbCompromisos AS C
	INNER JOIN IMVE.TbMinisterios AS M
		ON C.IdMinisterio = M.IdMinisterio
	INNER JOIN IMVE.TbTiposCompromisos AS TC
		ON C.IdTipoCompromiso = TC.IdTipoCompromiso
	INNER JOIN IMVE.TbResponsablesCompromisos AS RC
		ON C.IdCompromiso = RC.IdCompromiso
	INNER JOIN (SELECT P.IdPersona
					, P.Identificacion
					, P.Nombre
					, P.Apellido1
					, P.Apellido2
					, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
					, P.FechaNacimiento
					, CONCAT(D.Descripcion,', ',C.Descripcion,', ',PR.Descripcion,', ',PA.Descripcion) AS Distrito
					, P.DireccionDomicilio
					, P.Telefono
					, P.Celular
					, P.Correo
					, CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
					, CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
				FROM IMVE.TbPersonas AS P
				LEFT JOIN IMVE.TbDistritos AS D 
					ON P.IdDistrito = D.IdDistrito
				LEFT JOIN IMVE.TbCantones AS C
					ON D.IdCanton = C.IdCanton
					AND D.IdProvincia = C.IdProvincia
					AND D.IdPais = C.IdPais
				LEFT JOIN IMVE.TbProvincias AS PR
					ON C.IdProvincia = PR.IdProvincia
					AND C.IdPais = PR.IdPais
				LEFT JOIN IMVE.TbPaises AS PA
					ON PR.IdPais = PA.IdPais
				WHERE P.Activo = 'A'
					AND P.IdPersona <> 1
				ORDER BY NombreCompleto) AS P
		ON RC.IdPersona = P.IdPersona
	WHERE C.FechaInicio BETWEEN p_FechaInicio AND p_FechaFin
    ORDER BY C.FechaInicio DESC
		, C.FechaFinal DESC;
    
ELSEIF p_TipoReponsable = 'G' THEN
	SELECT C.IdCompromiso
		, C.Descripcion AS Compromiso
		, TC.Descripcion AS TipoCompromiso
		, M.Descripcion AS Ministerio
		, G.Descripcion AS Responsable
		, C.FechaInicio
		, C.FechaFinal
		, C.Lugar
		, CASE C.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
	FROM IMVE.TbCompromisos AS C
	INNER JOIN IMVE.TbMinisterios AS M
		ON C.IdMinisterio = M.IdMinisterio
	INNER JOIN IMVE.TbTiposCompromisos AS TC
		ON C.IdTipoCompromiso = TC.IdTipoCompromiso
	INNER JOIN IMVE.TbReponsablesGruposCompromisos AS RGC
		ON C.IdCompromiso = RGC.IdCompromiso
	INNER JOIN IMVE.TbGrupos AS G
		ON RGC.IdGrupo = G.IdGrupo
	WHERE C.FechaInicio BETWEEN p_FechaInicio AND p_FechaFin
    ORDER BY C.FechaInicio DESC
		, C.FechaFinal DESC;
    
ELSE
	SELECT C.IdCompromiso
		, C.Compromiso
		, C.TipoCompromiso
		, C.Ministerio
		, C.Responsable
		, C.FechaInicio
		, C.FechaFinal
		, C.Lugar
		, C.Estado
    FROM(SELECT C.IdCompromiso
			, C.Descripcion AS Compromiso
			, TC.Descripcion AS TipoCompromiso
			, M.Descripcion AS Ministerio
			, P.NombreCompleto AS Responsable
			, C.FechaInicio
			, C.FechaFinal
			, C.Lugar
			, CASE C.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
		FROM IMVE.TbCompromisos AS C
		INNER JOIN IMVE.TbMinisterios AS M
			ON C.IdMinisterio = M.IdMinisterio
		INNER JOIN IMVE.TbTiposCompromisos AS TC
			ON C.IdTipoCompromiso = TC.IdTipoCompromiso
		INNER JOIN IMVE.TbResponsablesCompromisos AS RC
			ON C.IdCompromiso = RC.IdCompromiso
		INNER JOIN (SELECT P.IdPersona
						, P.Identificacion
						, P.Nombre
						, P.Apellido1
						, P.Apellido2
						, CONCAT(P.Nombre,' ',P.Apellido1,' ',P.Apellido2) AS NombreCompleto
						, P.FechaNacimiento
						, CONCAT(D.Descripcion,', ',C.Descripcion,', ',PR.Descripcion,', ',PA.Descripcion) AS Distrito
						, P.DireccionDomicilio
						, P.Telefono
						, P.Celular
						, P.Correo
						, CASE P.Sexo WHEN 'M' THEN 'Masculino' ELSE 'Femenino' END AS Sexo
						, CASE P.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
					FROM IMVE.TbPersonas AS P
					LEFT JOIN IMVE.TbDistritos AS D 
						ON P.IdDistrito = D.IdDistrito
					LEFT JOIN IMVE.TbCantones AS C
						ON D.IdCanton = C.IdCanton
						AND D.IdProvincia = C.IdProvincia
						AND D.IdPais = C.IdPais
					LEFT JOIN IMVE.TbProvincias AS PR
						ON C.IdProvincia = PR.IdProvincia
						AND C.IdPais = PR.IdPais
					LEFT JOIN IMVE.TbPaises AS PA
						ON PR.IdPais = PA.IdPais
					WHERE P.Activo = 'A'
						AND P.IdPersona <> 1
					ORDER BY NombreCompleto) AS P
			ON RC.IdPersona = P.IdPersona

		UNION ALL

		SELECT C.IdCompromiso
			, C.Descripcion AS Compromiso
			, TC.Descripcion AS TipoCompromiso
			, M.Descripcion AS Ministerio
			, G.Descripcion AS Responsable
			, C.FechaInicio
			, C.FechaFinal
			, C.Lugar
			, CASE C.Activo WHEN 'A' THEN 'Activo' ELSE 'Inactivo' END AS Estado
		FROM IMVE.TbCompromisos AS C
		INNER JOIN IMVE.TbMinisterios AS M
			ON C.IdMinisterio = M.IdMinisterio
		INNER JOIN IMVE.TbTiposCompromisos AS TC
			ON C.IdTipoCompromiso = TC.IdTipoCompromiso
		INNER JOIN IMVE.TbReponsablesGruposCompromisos AS RGC
			ON C.IdCompromiso = RGC.IdCompromiso
		INNER JOIN IMVE.TbGrupos AS G
			ON RGC.IdGrupo = G.IdGrupo) AS C
	WHERE C.FechaInicio BETWEEN p_FechaInicio AND p_FechaFin
    ORDER BY C.FechaInicio DESC
		, C.FechaFinal DESC;
END IF;

END //
DELIMITER ;


-- -----------------------------------------------------------------------------
-- CREACIÓN INSERTS
-- -----------------------------------------------------------------------------

-- -----------------------------------------------------
-- PAISES, PROVINCIAS, CANTONES Y DISTRITOS
-- -----------------------------------------------------

-- Paises
-- ALTER TABLE IMVE.TbPaises AUTO_INCREMENT = 1
INSERT INTO IMVE.TbPaises(Descripcion) VALUES 
('Costa Rica');

-- Provincias
-- ALTER TABLE IMVE.TbProvincias AUTO_INCREMENT = 1
INSERT INTO IMVE.TbProvincias(IdPais,Descripcion) VALUES 
(1,'San José')
, (1,'Alajuela')
, (1,'Cartago')
, (1,'Heredia')
, (1,'Guanacaste')
, (1,'Puntarenas')
, (1,'Limón');

-- Cantones
-- ALTER TABLE IMVE.TbCantones AUTO_INCREMENT = 1
INSERT INTO IMVE.TbCantones(IdProvincia,IdPais,Descripcion) VALUES 
(1,1,'Central')
, (1,1,'Escazú')
, (1,1,'Desamparados')
, (1,1,'Puriscal')
, (1,1,'Tarrazú')
, (1,1,'Aserrí')
, (1,1,'Mora')
, (1,1,'Goicoechea')
, (1,1,'Santa Ana')
, (1,1,'Alajuelita')
, (1,1,'Vázquez De Coronado')
, (1,1,'Acosta')
, (1,1,'Tibás')
, (1,1,'Moravia')
, (1,1,'Montes De Oca')
, (1,1,'Turrubares')
, (1,1,'Dota')
, (1,1,'Curridabat')
, (1,1,'Pérez Zeledón')
, (1,1,'León Cortes Castro')
, (2,1,'Alajuela')
, (2,1,'San Ramón')
, (2,1,'Grecia')
, (2,1,'San Mateo')
, (2,1,'Atenas')
, (2,1,'Naranjo')
, (2,1,'Palmares')
, (2,1,'Poás')
, (2,1,'Orotina')
, (2,1,'San Carlos')
, (2,1,'Zarcero')
, (2,1,'Valverde Vega')
, (2,1,'Upala')
, (2,1,'Los Chiles')
, (2,1,'Guatuso')
, (3,1,'Cartago')
, (3,1,'Paraíso')
, (3,1,'La Unión')
, (3,1,'Jiménez')
, (3,1,'Turrialba')
, (3,1,'Alvarado')
, (3,1,'Oreamuno')
, (3,1,'El Guarco')
, (4,1,'Heredia')
, (4,1,'Barva')
, (4,1,'Santo Domingo')
, (4,1,'Santa Bárbara')
, (4,1,'San Rafael')
, (4,1,'San Isidro')
, (4,1,'Belén')
, (4,1,'Flores')
, (4,1,'San Pablo')
, (4,1,'Sarapiquí')
, (5,1,'Liberia')
, (5,1,'Nicoya')
, (5,1,'Santa Cruz')
, (5,1,'Bagaces')
, (5,1,'Carrillo')
, (5,1,'Cañas')
, (5,1,'Abangares')
, (5,1,'Tilarán')
, (5,1,'Nandayure')
, (5,1,'La Cruz')
, (5,1,'Hojancha')
, (6,1,'Puntarenas')
, (6,1,'Esparza')
, (6,1,'Buenos Aires')
, (6,1,'Montes de Oro')
, (6,1,'Osa')
, (6,1,'Aguirre')
, (6,1,'Golfito')
, (6,1,'Coto Brus')
, (6,1,'Parrita')
, (6,1,'Corredores')
, (6,1,'Garabito')
, (7,1,'Limón')
, (7,1,'Pococí')
, (7,1,'Siquirres')
, (7,1,'Talamanca')
, (7,1,'Matina')
, (7,1,'Guácimo');

-- Distritos
-- ALTER TABLE IMVE.TbDistritos AUTO_INCREMENT = 1
INSERT INTO IMVE.TbDistritos(IdCanton,IdProvincia,IdPais,Descripcion) VALUES 
(1,1,1,'Carmen')
, (1,1,1,'Merced')
, (1,1,1,'Hospital')
, (1,1,1,'Catedral')
, (1,1,1,'Zapote')
, (1,1,1,'San Francisco de Dos Ríos')
, (1,1,1,'Uruca')
, (1,1,1,'Mata Redonda')
, (1,1,1,'Pavas')
, (1,1,1,'Hatillo')
, (1,1,1,'San Sebastián')
, (2,1,1,'Escazú')
, (2,1,1,'San Antonio')
, (2,1,1,'San Rafael')
, (3,1,1,'Desamparados')
, (3,1,1,'San Miguel')
, (3,1,1,'San Juan de Dios')
, (3,1,1,'San Rafael Arriba')
, (3,1,1,'San Antonio')
, (3,1,1,'Frailes')
, (3,1,1,'Patarrá')
, (3,1,1,'San Cristóbal')
, (3,1,1,'Rosario')
, (3,1,1,'Damas')
, (3,1,1,'San Rafael Abajo')
, (3,1,1,'Gravilias')
, (3,1,1,'Los Guido')
, (4,1,1,'Santiago')
, (4,1,1,'Mercedes Sur')
, (4,1,1,'Barbacoas')
, (4,1,1,'Grifo Alto')
, (4,1,1,'San Rafael')
, (4,1,1,'Candelarita')
, (4,1,1,'Desamparaditos')
, (4,1,1,'San Antonio')
, (4,1,1,'Chires')
, (5,1,1,'San Marcos')
, (5,1,1,'San Lorenzo')
, (5,1,1,'San Carlos')
, (6,1,1,'Aserrí')
, (6,1,1,'Tarbaca')
, (6,1,1,'Vuelta de Jorco')
, (6,1,1,'San Gabriel')
, (6,1,1,'Legua')
, (6,1,1,'Monterrey')
, (6,1,1,'Salitrillos')
, (7,1,1,'Ciudad Colón')
, (7,1,1,'Guayabo')
, (7,1,1,'Tabarcia')
, (7,1,1,'Piedras Negras')
, (7,1,1,'Picagres')
, (7,1,1,'Jaris')
, (7,1,1,'Quitirrisí')
, (8,1,1,'Guadalupe')
, (8,1,1,'San Francisco')
, (8,1,1,'Calle Blancos')
, (8,1,1,'Mata de Plátano')
, (8,1,1,'Ipís')
, (8,1,1,'Rancho Redondo')
, (8,1,1,'Purral')
, (9,1,1,'Santa Ana')
, (9,1,1,'Salitral')
, (9,1,1,'Pozos')
, (9,1,1,'Uruca')
, (9,1,1,'Piedades')
, (9,1,1,'Brasil')
, (10,1,1,'Alajuelita')
, (10,1,1,'San Josecito')
, (10,1,1,'San Antonio')
, (10,1,1,'Concepción')
, (10,1,1,'San Felipe')
, (11,1,1,'San Isidro')
, (11,1,1,'San Rafael')
, (11,1,1,'Dulce Nombre de Jesús')
, (11,1,1,'Patalillo')
, (11,1,1,'Cascajal')
, (12,1,1,'San Ignacio')
, (12,1,1,'Guaitil')
, (12,1,1,'Palmichal')
, (12,1,1,'Cangrejal')
, (12,1,1,'Sabanillas')
, (13,1,1,'San Juan')
, (13,1,1,'Cinco Esquinas')
, (13,1,1,'Anselmo Llorente')
, (13,1,1,'León XIII')
, (13,1,1,'Colima')
, (14,1,1,'San Vicente')
, (14,1,1,'San Jerónimo')
, (14,1,1,'Trinidad')
, (15,1,1,'San Pedro')
, (15,1,1,'Sabanilla')
, (15,1,1,'Mercedes')
, (15,1,1,'San Rafael')
, (16,1,1,'San Pablo')
, (16,1,1,'San Pedro')
, (16,1,1,'San Juan de Mata')
, (16,1,1,'San Luis')
, (16,1,1,'Carara')
, (17,1,1,'Santa María')
, (17,1,1,'Jardín')
, (17,1,1,'Copey')
, (18,1,1,'Curridabat')
, (18,1,1,'Granadilla')
, (18,1,1,'Sánchez')
, (18,1,1,'Tirrases')
, (19,1,1,'San Isidro de El General')
, (19,1,1,'El General')
, (19,1,1,'Daniel Flores')
, (19,1,1,'Rivas')
, (19,1,1,'San Pedro')
, (19,1,1,'Platanares')
, (19,1,1,'Pejibaye')
, (19,1,1,'Cajón')
, (19,1,1,'Barú')
, (19,1,1,'Río Nuevo')
, (19,1,1,'Páramo')
, (20,1,1,'San Pablo')
, (20,1,1,'San Andrés')
, (20,1,1,'Llano Bonito')
, (20,1,1,'San Isidro')
, (20,1,1,'Santa Cruz')
, (20,1,1,'San Antonio')
, (21,2,1,'Alajuela')
, (21,2,1,'San José')
, (21,2,1,'Carrizal')
, (21,2,1,'San Antonio')
, (21,2,1,'Guácima')
, (21,2,1,'San Isidro')
, (21,2,1,'Sabanilla')
, (21,2,1,'San Rafael')
, (21,2,1,'Río Segundo')
, (21,2,1,'Desamparados')
, (21,2,1,'Turrúcares')
, (21,2,1,'Tambor')
, (21,2,1,'Garita')
, (21,2,1,'Sarapiquí')
, (22,2,1,'San Ramón')
, (22,2,1,'Santiago')
, (22,2,1,'San Juan')
, (22,2,1,'Piedades Norte')
, (22,2,1,'Piedades Sur')
, (22,2,1,'San Rafael')
, (22,2,1,'San Isidro')
, (22,2,1,'Ángeles')
, (22,2,1,'Alfaro')
, (22,2,1,'Volio')
, (22,2,1,'Concepción')
, (22,2,1,'Zapotal')
, (22,2,1,'Peñas Blancas')
, (23,2,1,'Grecia')
, (23,2,1,'San Isidro')
, (23,2,1,'San José')
, (23,2,1,'San Roque')
, (23,2,1,'Tacares')
, (23,2,1,'Río Cuarto')
, (23,2,1,'Puente de Piedra')
, (23,2,1,'Bolívar')
, (24,2,1,'San Mateo')
, (24,2,1,'Desmonte')
, (24,2,1,'Jesús María')
, (24,2,1,'Labrador')
, (25,2,1,'Atenas')
, (25,2,1,'Jesús')
, (25,2,1,'Mercedes')
, (25,2,1,'San Isidro')
, (25,2,1,'Concepción')
, (25,2,1,'San José')
, (25,2,1,'Santa Eulalia')
, (25,2,1,'Escobal')
, (26,2,1,'Naranjo')
, (26,2,1,'San Miguel')
, (26,2,1,'San José')
, (26,2,1,'Cirrí Sur')
, (26,2,1,'San Jerónimo')
, (26,2,1,'San Juan')
, (26,2,1,'El Rosario')
, (26,2,1,'Palmitos')
, (27,2,1,'Palmares')
, (27,2,1,'Zaragoza')
, (27,2,1,'Buenos Aires')
, (27,2,1,'Santiago')
, (27,2,1,'Candelaria')
, (27,2,1,'Esquipulas')
, (27,2,1,'La Granja')
, (28,2,1,'San Pedro')
, (28,2,1,'San Juan')
, (28,2,1,'San Rafael')
, (28,2,1,'Carrillos')
, (28,2,1,'Sabana Redonda')
, (29,2,1,'Orotina')
, (29,2,1,'Mastate')
, (29,2,1,'Hacienda Vieja')
, (29,2,1,'Coyolar')
, (29,2,1,'La Ceiba')
, (30,2,1,'Quesada')
, (30,2,1,'Florencia')
, (30,2,1,'Buenavista')
, (30,2,1,'Aguas Zarcas')
, (30,2,1,'Venecia')
, (30,2,1,'Pital')
, (30,2,1,'La Fortuna')
, (30,2,1,'La Tigra')
, (30,2,1,'La Palmera')
, (30,2,1,'Venado')
, (30,2,1,'Cutris')
, (30,2,1,'Monterrey')
, (30,2,1,'Pocosol')
, (31,2,1,'Zarcero')
, (31,2,1,'Laguna')
, (31,2,1,'Tapezco')
, (31,2,1,'Guadalupe')
, (31,2,1,'Palmira')
, (31,2,1,'Zapote')
, (31,2,1,'Brisas')
, (32,2,1,'Sarchí Norte')
, (32,2,1,'Sarchí Sur')
, (32,2,1,'Toro Amarillo')
, (32,2,1,'San Pedro')
, (32,2,1,'Rodríguez')
, (33,2,1,'Upala')
, (33,2,1,'Aguas Claras')
, (33,2,1,'San José (Pizote)')
, (33,2,1,'Bijagua')
, (33,2,1,'Delicias')
, (33,2,1,'Dos Ríos')
, (33,2,1,'Yolillal')
, (33,2,1,'Canalete')
, (34,2,1,'Los Chiles')
, (34,2,1,'Caño Negro')
, (34,2,1,'El Amparo')
, (34,2,1,'San Jorge')
, (35,2,1,'San Rafael')
, (35,2,1,'Buenavista')
, (35,2,1,'Cote')
, (35,2,1,'Katira')
, (36,3,1,'Oriental')
, (36,3,1,'Occidental')
, (36,3,1,'Carmen')
, (36,3,1,'San Nicolás')
, (36,3,1,'Agua Caliente')
, (36,3,1,'Guadalupe')
, (36,3,1,'Corralillo')
, (36,3,1,'Tierra Blanca')
, (36,3,1,'Dulce Nombre')
, (36,3,1,'Llano Grande')
, (36,3,1,'Quebradilla')
, (37,3,1,'Paraíso')
, (37,3,1,'Santiago de Paraíso')
, (37,3,1,'Orosi')
, (37,3,1,'Cachí')
, (37,3,1,'Llanos de Santa Lucía')
, (38,3,1,'Tres Ríos')
, (38,3,1,'San Diego')
, (38,3,1,'San Juan')
, (38,3,1,'San Rafael')
, (38,3,1,'Concepción')
, (38,3,1,'Dulce Nombre')
, (38,3,1,'San Ramón')
, (38,3,1,'Río Azul')
, (39,3,1,'Juan Viñas')
, (39,3,1,'Tucurrique')
, (39,3,1,'Pejibaye')
, (40,3,1,'Turrialba')
, (40,3,1,'La Suiza')
, (40,3,1,'Peralta')
, (40,3,1,'Santa Cruz')
, (40,3,1,'Santa Teresita')
, (40,3,1,'Pavones')
, (40,3,1,'Tuis')
, (40,3,1,'Tayutic')
, (40,3,1,'Santa Rosa')
, (40,3,1,'Tres Equis')
, (40,3,1,'La Isabel')
, (40,3,1,'Chirripó')
, (41,3,1,'Pacayas')
, (41,3,1,'Cervantes')
, (41,3,1,'Capellades')
, (42,3,1,'San Rafael')
, (42,3,1,'Cot')
, (42,3,1,'Potrero Cerrado')
, (42,3,1,'Cipreses')
, (42,3,1,'Santa Rosa')
, (43,3,1,'Tejar')
, (43,3,1,'San Isidro')
, (43,3,1,'Tobosi')
, (43,3,1,'Patio de Agua')
, (44,4,1,'Heredia')
, (44,4,1,'Mercedes')
, (44,4,1,'San Francisco')
, (44,4,1,'Ulloa')
, (44,4,1,'Varablanca')
, (45,4,1,'Barva')
, (45,4,1,'San Pedro')
, (45,4,1,'San Pablo')
, (45,4,1,'San Roque')
, (45,4,1,'Santa Lucía')
, (45,4,1,'San José de la Montaña')
, (46,4,1,'Santo Domingo')
, (46,4,1,'San Vicente')
, (46,4,1,'San Miguel')
, (46,4,1,'Paracito')
, (46,4,1,'Santo Tomás')
, (46,4,1,'Santa Rosa')
, (46,4,1,'Tures')
, (46,4,1,'Pará')
, (47,4,1,'Santa Bárbara')
, (47,4,1,'San Pedro')
, (47,4,1,'San Juan')
, (47,4,1,'Jesús')
, (47,4,1,'Santo Domingo')
, (47,4,1,'Purabá')
, (48,4,1,'San Rafael')
, (48,4,1,'San Josecito')
, (48,4,1,'Santiago')
, (48,4,1,'Ángeles')
, (48,4,1,'Concepción')
, (49,4,1,'San Isidro')
, (49,4,1,'San José')
, (49,4,1,'Concepción')
, (49,4,1,'San Francisco')
, (50,4,1,'San Antonio')
, (50,4,1,'La Ribera')
, (50,4,1,'La Asunción')
, (51,4,1,'San Joaquín')
, (51,4,1,'Barrantes')
, (51,4,1,'Llorente')
, (52,4,1,'San Pablo')
, (52,4,1,'Rincón de Sabanilla')
, (53,4,1,'Puerto Viejo')
, (53,4,1,'La Virgen')
, (53,4,1,'Las Horquetas')
, (53,4,1,'Llanuras del Gaspar')
, (53,4,1,'Cureña')
, (54,5,1,'Liberia')
, (54,5,1,'Cañas Dulces')
, (54,5,1,'Mayorga')
, (54,5,1,'Nacascolo')
, (54,5,1,'Curubandé')
, (55,5,1,'Nicoya')
, (55,5,1,'Mansión')
, (55,5,1,'San Antonio')
, (55,5,1,'Quebrada Honda')
, (55,5,1,'Sámara')
, (55,5,1,'Nosara')
, (55,5,1,'Belén de Nosarita')
, (56,5,1,'Santa Cruz')
, (56,5,1,'Bolsón')
, (56,5,1,'Veintisiete de Abril')
, (56,5,1,'Tempate')
, (56,5,1,'Cartagena')
, (56,5,1,'Cuajiniquil')
, (56,5,1,'Diriá')
, (56,5,1,'Cabo Velas')
, (56,5,1,'Tamarindo')
, (57,5,1,'Bagaces')
, (57,5,1,'La Fortuna')
, (57,5,1,'Mogote')
, (57,5,1,'Río Naranjo')
, (58,5,1,'Filadelfia')
, (58,5,1,'Palmira')
, (58,5,1,'Sardinal')
, (58,5,1,'Belén')
, (59,5,1,'Cañas')
, (59,5,1,'Palmira')
, (59,5,1,'San Miguel')
, (59,5,1,'Bebedero')
, (59,5,1,'Porozal')
, (60,5,1,'Las Juntas')
, (60,5,1,'Sierra')
, (60,5,1,'San Juan')
, (60,5,1,'Colorado')
, (61,5,1,'Tilarán')
, (61,5,1,'Quebrada Grande')
, (61,5,1,'Tronadora')
, (61,5,1,'Santa Rosa')
, (61,5,1,'Líbano')
, (61,5,1,'Tierras Morenas')
, (61,5,1,'Arenal')
, (62,5,1,'Carmona')
, (62,5,1,'Santa Rita')
, (62,5,1,'Zapotal')
, (62,5,1,'San Pablo')
, (62,5,1,'Porvenir')
, (62,5,1,'Bejuco')
, (63,5,1,'La Cruz')
, (63,5,1,'Santa Cecilia')
, (63,5,1,'La Garita')
, (63,5,1,'Santa Elena')
, (64,5,1,'Hojancha')
, (64,5,1,'Monte Romo')
, (64,5,1,'Puerto Carrillo')
, (64,5,1,'Huacas')
, (65,6,1,'Puntarenas')
, (65,6,1,'Pitahaya')
, (65,6,1,'Chomes')
, (65,6,1,'Lepanto')
, (65,6,1,'Paquera')
, (65,6,1,'Manzanillo')
, (65,6,1,'Guacimal')
, (65,6,1,'Barranca')
, (65,6,1,'Monteverde')
, (65,6,1,'Isla del Coco')
, (65,6,1,'Cóbano')
, (65,6,1,'Chacarita')
, (65,6,1,'Chira')
, (65,6,1,'Acapulco')
, (65,6,1,'El Roble')
, (65,6,1,'Arancibia')
, (66,6,1,'Espíritu Santo')
, (66,6,1,'San Juan Grande')
, (66,6,1,'Macacona')
, (66,6,1,'San Rafael')
, (66,6,1,'San Jerónimo')
, (66,6,1,'Caldera')
, (67,6,1,'Buenos Aires')
, (67,6,1,'Volcán')
, (67,6,1,'Potrero Grande')
, (67,6,1,'Boruca')
, (67,6,1,'Pilas')
, (67,6,1,'Colinas')
, (67,6,1,'Chánguena')
, (67,6,1,'Biolley')
, (67,6,1,'Brunka')
, (68,6,1,'Miramar')
, (68,6,1,'La Unión')
, (68,6,1,'San Isidro')
, (69,6,1,'Cortés')
, (69,6,1,'Palmar')
, (69,6,1,'Sierpe')
, (69,6,1,'Bahía Ballena')
, (69,6,1,'Piedras Blancas')
, (69,6,1,'Bahía Drake')
, (70,6,1,'Quepos')
, (70,6,1,'Savegre')
, (70,6,1,'Naranjito')
, (71,6,1,'Golfito')
, (71,6,1,'Puerto Jiménez')
, (71,6,1,'Guaycará')
, (71,6,1,'Pavón')
, (72,6,1,'San Vito')
, (72,6,1,'Sabalito')
, (72,6,1,'Aguabuena')
, (72,6,1,'Limoncito')
, (72,6,1,'Pittier')
, (72,6,1,'Gutiérrez Brown')
, (73,6,1,'Parrita')
, (74,6,1,'Corredor')
, (74,6,1,'La Cuesta')
, (74,6,1,'Paso Canoas')
, (74,6,1,'Laurel')
, (75,6,1,'Jacó')
, (75,6,1,'Tárcoles')
, (76,7,1,'Limón')
, (76,7,1,'Valle La Estrella')
, (76,7,1,'Río Blanco')
, (76,7,1,'Matama')
, (77,7,1,'Guápiles')
, (77,7,1,'Jiménez')
, (77,7,1,'Rita')
, (77,7,1,'Roxana')
, (77,7,1,'Cariari')
, (77,7,1,'Colorado')
, (77,7,1,'La Colonia')
, (78,7,1,'Siquirres')
, (78,7,1,'Pacuarito')
, (78,7,1,'Florida')
, (78,7,1,'Germania')
, (78,7,1,'Cairo')
, (78,7,1,'Alegría')
, (79,7,1,'Bratsi')
, (79,7,1,'Sixaola')
, (79,7,1,'Cahuita')
, (79,7,1,'Telire')
, (80,7,1,'Matina')
, (80,7,1,'Batán')
, (80,7,1,'Carrandi')
, (81,7,1,'Guácimo')
, (81,7,1,'Mercedes')
, (81,7,1,'Pocora')
, (81,7,1,'Río Jiménez')
, (81,7,1,'Duacarí');

-- -----------------------------------------------------
-- LAS OTRAS TABLAS
-- -----------------------------------------------------

INSERT INTO IMVE.TbRolesUsuarios(Descripcion,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
('SuperAdmin',1,CURRENT_TIMESTAMP,'A')
, ('Administrador',1,CURRENT_TIMESTAMP,'A')
, ('Colaborador',1,CURRENT_TIMESTAMP,'A');

INSERT INTO IMVE.TbPersonas(Identificacion,Nombre,Apellido1,Apellido2,FechaNacimiento,IdDistrito,DireccionDomicilio,Telefono,Celular,Correo,Sexo,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
('101110111','Admin','Sistema','IMVE','1991-05-11',251,'Llanos de Santa Lucía',86073518,40335942,'gmolinac@outlook.com','M',1,CURRENT_TIMESTAMP,'A')
, ('304540214','Gilbert','Molina','Castrillo','1991-05-11',251,'300mts sur del estadio de Paraíso','40335942','86073518','gmolinac@outlook.com','M',1,CURRENT_TIMESTAMP,'A')
, ('303110303','Antonio','Molina','Rojas','1970-11-08',251,'300mts sur del estadio de Paraíso','40335942','87566245','gmolinac91@gmail.com','M',1,CURRENT_TIMESTAMP,'A')
, ('501870174','Sonia','Castrillo','Baltodano','1960-05-31',251,'300mts sur del estadio de Paraíso','','86859385','','F',1,CURRENT_TIMESTAMP,'A')
, ('307430453','Dennis','Centeno','Lizano','1980-10-20',251,'Urbanización por el cementerio','25749729','88720661','decenteno@hotmail.com','M',1,CURRENT_TIMESTAMP,'A')
, ('104560543','Joe','Doe','Summer','1985-01-20',74,'100mts sur del Mall San Pedro','','86284947','','M',1,CURRENT_TIMESTAMP,'I');

INSERT INTO IMVE.TbUsuarios(IdPersona,IdRolUsuario,Contrasena,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
(1,1,'8cb2237d0679ca88db6464eac60da96345513964',1,CURRENT_TIMESTAMP,'A') -- Constraseña desencriptada: 12345
, (2,2,'7c62f7e9b440e2232437218732d350971d066d5c',1,CURRENT_TIMESTAMP,'A') -- Constraseña desencriptada: gmolina
, (3,3,'07d7ae0f3696ffb5440182547e727fde697cf18e',1,CURRENT_TIMESTAMP,'A') -- Constraseña desencriptada: amolina
, (4,3,'d35514736146439b7277437016cdb40d7fb65497',1,CURRENT_TIMESTAMP,'I'); -- Constraseña desencriptada: jdoe

INSERT INTO IMVE.TbTiposRelaciones(NombreMasculino,NombreFemenino,NombreInversoMasculino,NombreInversoFemenino,UsuarioUltimaModificacion,FechaUltimaModificacion) VALUES 
('Abuelo','Abuela','Nieto','Nieta',1,CURRENT_TIMESTAMP)
, ('Padre','Madre','Hijo','Hija',1,CURRENT_TIMESTAMP)
, ('Padrastro','Madrastra','Hijastro','Hijastra',1,CURRENT_TIMESTAMP)
, ('Tío','Tía','Sobrino','Sobrina',1,CURRENT_TIMESTAMP)
, ('Hermano','Hermana','','',1,CURRENT_TIMESTAMP)
, ('Bisabuelo','Bisabuela','Bisnieto','Bisnieta',1,CURRENT_TIMESTAMP)
, ('Suegro','Suegra','Yerno','Nuera',1,CURRENT_TIMESTAMP)
, ('Primo','Prima','','',1,CURRENT_TIMESTAMP)
, ('Cuñado','Cuñada','','',1,CURRENT_TIMESTAMP)
, ('Novio','Novia','','',1,CURRENT_TIMESTAMP)
, ('Padrino','Madrina','Ahijado','Ahijada',1,CURRENT_TIMESTAMP)
, ('Esposo','Esposa','','',1,CURRENT_TIMESTAMP);

INSERT INTO IMVE.TbTiposRelacionesPersonas(IdTipoRelacion,IdPersonaRelacionado1,IdPersonaRelacionado2,UsuarioUltimaModificacion,FechaUltimaModificacion) VALUES 
(2,3,2,1,CURRENT_TIMESTAMP)
, (2,4,2,1,CURRENT_TIMESTAMP)
, (12,3,4,1,CURRENT_TIMESTAMP);

INSERT INTO IMVE.TbMinisterios(Descripcion,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
('Alabanza',1,CURRENT_TIMESTAMP,'A')
, ('Red de matrimonios',1,CURRENT_TIMESTAMP,'A')
, ('Restauración',1,CURRENT_TIMESTAMP,'A')
, ('Vida plena',1,CURRENT_TIMESTAMP,'A');

INSERT INTO IMVE.TbCategorias(Descripcion,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
('Pastor',1,CURRENT_TIMESTAMP,'A')
, ('Consejero',1,CURRENT_TIMESTAMP,'A')
, ('Visitante',1,CURRENT_TIMESTAMP,'A')
, ('Técnico',1,CURRENT_TIMESTAMP,'A')
, ('Ujier',1,CURRENT_TIMESTAMP,'I');

INSERT INTO IMVE.TbCategoriasPersonas(IdCategoria,IdPersona,UsuarioUltimaModificacion,FechaUltimaModificacion) VALUES
(4,1,1,CURRENT_TIMESTAMP)
, (4,2,1,CURRENT_TIMESTAMP)
, (3,3,1,CURRENT_TIMESTAMP)
, (3,4,1,CURRENT_TIMESTAMP)
, (1,5,1,CURRENT_TIMESTAMP)
, (2,5,1,CURRENT_TIMESTAMP);

INSERT INTO IMVE.TbCategoriasGrupos(Descripcion,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
('Banda',1,CURRENT_TIMESTAMP,'A')
, ('Ensamble',1,CURRENT_TIMESTAMP,'A')
, ('Célula',1,CURRENT_TIMESTAMP,'A')
, ('Rédil',1,CURRENT_TIMESTAMP,'A')
, ('Oración',1,CURRENT_TIMESTAMP,'A');

INSERT INTO IMVE.TbGrupos(IdCategoriaGrupo,IdMinisterio,Descripcion,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
(1,1,'Banda 1',1,CURRENT_TIMESTAMP,'A')
, (1,1,'Banda 2',1,CURRENT_TIMESTAMP,'A')
, (1,1,'Banda 3',1,CURRENT_TIMESTAMP,'A')
, (2,NULL,'Composición nueva letra',1,CURRENT_TIMESTAMP,'A')
, (2,3,'Ensayo nueva banda',1,CURRENT_TIMESTAMP,'A');

INSERT INTO IMVE.TbGruposPersonas(IdPersona,IdGrupo,EsLider,FechaInicio,FechaFin,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES
(2,1,'N','2016-11-10',NULL,1,CURRENT_TIMESTAMP,'A')
, (3,1,'S','2016-11-10',NULL,1,CURRENT_TIMESTAMP,'A')
, (3,2,'N','2016-11-10','2016-11-12',1,CURRENT_TIMESTAMP,'N')
, (4,2,'S','2016-11-10',NULL,1,CURRENT_TIMESTAMP,'A')
, (5,1,'S','2016-11-10',NULL,1,CURRENT_TIMESTAMP,'A')
, (5,2,'S','2016-11-10',NULL,1,CURRENT_TIMESTAMP,'A')
, (5,3,'N','2016-11-10',NULL,1,CURRENT_TIMESTAMP,'A')
, (5,4,'N','2016-11-10','2016-11-12',1,CURRENT_TIMESTAMP,'N');

INSERT INTO IMVE.TbTiposCompromisos(Descripcion,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
('Consejería',1,CURRENT_TIMESTAMP,'A')
, ('Prematrimonial',1,CURRENT_TIMESTAMP,'A')
, ('Seguimiento pastoral',1,CURRENT_TIMESTAMP,'A')
, ('Ensayo',1,CURRENT_TIMESTAMP,'A');

INSERT INTO IMVE.TbTiposSeguimientos(Descripcion,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES 
('Llamar',1,CURRENT_TIMESTAMP,'A')
, ('Visitar',1,CURRENT_TIMESTAMP,'A')
, ('Mensaje',1,CURRENT_TIMESTAMP,'A');

INSERT INTO IMVE.TbCompromisos(IdMinisterio,IdTipoCompromiso,Descripcion,FechaInicio,FechaFinal,Lugar,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES
(1,1,'Reunión','2016-11-10','2016-11-11','Iglesia, Salón Principal',1,CURRENT_TIMESTAMP,'A')
, (1,1,'Reunión','2016-11-11','2016-11-13','Salón Comunal',1,CURRENT_TIMESTAMP,'A')
, (2,1,'Reunión','2016-11-10','2016-11-12','Parque de Paraíso',1,CURRENT_TIMESTAMP,'A')
, (2,1,'Reunión','2016-11-11','2016-11-12','Ruinas de Ujarrás',1,CURRENT_TIMESTAMP,'A')
, (3,1,'Reunión','2016-11-11','2016-11-12','Iglesia',1,CURRENT_TIMESTAMP,'A')
, (3,1,'Reunión','2016-11-12','2016-11-14','Plaza Paraíso',1,CURRENT_TIMESTAMP,'A')
, (4,1,'Reunión','2016-11-11','2016-11-11','Jardín Lankester',1,CURRENT_TIMESTAMP,'A')
, (5,1,'Reunión','2016-11-14','2016-11-15','Laguna de Doña Ana',1,CURRENT_TIMESTAMP,'A')
, (1,1,'Reunión','2016-11-13','2016-11-14','Plaza de la Cultura',1,CURRENT_TIMESTAMP,'A');

INSERT INTO IMVE.TbResponsablesCompromisos(IdPersona,IdCompromiso,UsuarioUltimaModificacion,FechaUltimaModificacion) VALUES
(5,1,1,CURRENT_TIMESTAMP)
, (2,2,1,CURRENT_TIMESTAMP);

INSERT INTO IMVE.TbReponsablesGruposCompromisos(IdGrupo,IdCompromiso,UsuarioUltimaModificacion,FechaUltimaModificacion) VALUES
(1,4,1,CURRENT_TIMESTAMP)
, (2,4,1,CURRENT_TIMESTAMP);

INSERT INTO IMVE.TbVisitas(IdMinisterio,Descripcion,FechaVisita,UsuarioUltimaModificacion,FechaUltimaModificacion,Cerrada) VALUES
(1,'Solicitud de comestible','2016-10-10',1,CURRENT_TIMESTAMP,'N')
, (2,'Consejería marital','2016-11-15',1,CURRENT_TIMESTAMP,'N');

INSERT INTO IMVE.TbPersonasVisitas(IdVisita,IdPersona,UsuarioUltimaModificacion,FechaUltimaModificacion) VALUES
(1,2,1,CURRENT_TIMESTAMP)
, (2,3,1,CURRENT_TIMESTAMP);

INSERT INTO IMVE.TbSeguimientos(IdVisita,IdMinisterio,IdPersonaResponsable,IdTipoSeguimiento,Descripcion,FechaPropuesta,FechaRealizacion,Observaciones,UsuarioUltimaModificacion,FechaUltimaModificacion,Activo) VALUES
(1,1,4,1,'Llamada #1','2016-11-22',NULL,'',1,CURRENT_TIMESTAMP,'A')
, (1,1,4,1,'Llamada #2','2016-11-29',NULL,'',1,CURRENT_TIMESTAMP,'A')
, (1,1,4,2,'Visita','2016-12-06',NULL,'',1,CURRENT_TIMESTAMP,'A')
, (2,2,5,1,'Llamada #1','2016-11-22',NULL,'',1,CURRENT_TIMESTAMP,'A')
, (2,2,5,1,'Llamada #2','2016-11-29',NULL,'',1,CURRENT_TIMESTAMP,'A')
, (2,2,5,2,'Visita','2016-12-06',NULL,'',1,CURRENT_TIMESTAMP,'A');